Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 1
resident.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     It	is impossible to debug!	SO...SI...DI...SS
      3				     ;			     @Rogov Anatoliy 25.02.2025	"When will I delete DOSBox?"
      4				     ;------------------------------------------------------------------------------
      5
      6	      =B800		     video_segment	     = 0b800h							     ;video +
      7				     segment
      8	      =0050		     window_len			     = 80							    +
      9				     ;window row length
     10	      =0019		     window_height	     = 25							     ;window+
     11				     column height
     12
     13	0000			     .model tiny										    +
     14				     ;set 64 Kb	model
     15	0000			     .code											    +
     16				     ;define code block
     17				     org 100h											    +
     18				     ;prog's beginning ram block
     19
     20	0100			     Start:
     21																    +
     22				     ;==============================================================================================
     23	0100  33 C0			     xor ax, ax										    +
     24				     ;ax = 0
     25	0102  8E C0			     mov es, ax										    +
     26				     ;es = 0
     27	0104  BB 0024			     mov bx, 0009h * 4									    +
     28				     ;bx = &int	09h
     29
     30	0107  26: 8B 07			     mov ax, es:[bx]									    +
     31				     ;ax = old09h offset
     32	010A  A3 01A4r			     mov old09ofs, ax									    +
     33				     ;old09fs =	ax
     34	010D  26: 8B 47	02		     mov ax, es:[bx + 2]								    +
     35				     ;ax = old09h segment
     36	0111  A3 01A6r			     mov old09seg, ax									    +
     37				     ;old09seg = ax
     38
     39	0114  FA			     cli										    +
     40				     ;clear interrupt flag
     41	0115  26: C7 07	0179r		     mov es:[bx], offset New09h							     ;change+
     42				     09h interrupt function by mine
     43	011A  0E			     push cs										    +
     44				     ;save current code	segment
     45	011B  58			     pop ax										    +
     46				     ;ax = cs
     47	011C  26: 89 47	02		     mov es:[bx	+ 2], ax								    +
     48				     ;current segment
     49	0120  FB			     sti										    +
     50				     ;set interrupt flag
     51																    +
     52				     ;==============================================================================================
     53	0121  33 C0			     xor ax, ax										    +
     54				     ;ax = 0
     55	0123  8E C0			     mov es, ax										    +
     56				     ;es = 0
     57	0125  BB 0020			     mov bx, 0008h * 4									    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 2
resident.asm



     58				     ;bx = &int	08h
     59
     60	0128  26: 8B 07			     mov ax, es:[bx]									    +
     61				     ;ax = old09h offset
     62	012B  A3 0175r			     mov old08ofs, ax									    +
     63				     ;old09fs =	ax
     64	012E  26: 8B 47	02		     mov ax, es:[bx + 2]								    +
     65				     ;ax = old09h segment
     66	0132  A3 0177r			     mov old08seg, ax									    +
     67				     ;old09seg = ax
     68
     69	0135  FA			     cli										    +
     70				     ;clear interrupt flag
     71	0136  26: C7 07	0153r		     mov es:[bx], offset New08h							     ;change+
     72				     09h interrupt function by mine
     73	013B  0E			     push cs										    +
     74				     ;save current code	segment
     75	013C  58			     pop ax										    +
     76				     ;ax = cs
     77	013D  26: 89 47	02		     mov es:[bx	+ 2], ax								    +
     78				     ;current segment
     79	0141  FB			     sti										    +
     80				     ;set interrupt flag
     81
     82	0142  B8 3100			     mov ax, 3100h									    +
     83				     ;make program resident
     84	0145  BA 0647r			     mov dx, offset EOP									    +
     85				     ;dx = &EOP
     86	0148  D1 EA D1 EA D1 EA	D1+	     shr dx, 4										    +
     87	      EA		     ;dx /= 4
     88	0150  42			     inc dx										    +
     89				     ;dx += 1
     90	0151  CD 21			     int 21h										    +
     91				     ;31 function of 21	interrupt
     92				     ;------------------------------------------------------------------------------
     93				     ; New procedural handler of 08h interrupt - timer
     94				     ; Entry:		     None
     95				     ; Exit:		     None
     96				     ; Destroyed:    None
     97				     ;------------------------------------------------------------------------------
     98
     99	0153			     New08h  proc
    100
    101	0153  50 53 51 52 56 57	1E+	     push ax bx	cx dx si di ds es bp					     ;save all	    +
    102	      06 55		     registers
    103	015C  0E			     push cs										    +
    104				     ;cs in stack
    105	015D  1F			     pop ds										    +
    106				     ;ds = cs
    107
    108	015E  80 3E 03B1r 01		     cmp Active, 1									    +
    109				     ;if (Active == 1) zf = 1
    110	0163  75 06			     jne skip_activision								    +
    111				     ;if (zf !=	1) goto	skip_activision--|
    112	0165  E8 0092				     call MainBorder								    +
    113				     ;Main Border function			     |
    114	0168  EB 01 90				     jmp old_08h								    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 3
resident.asm



    115				     ;goto old_08h ----------------------|---|
    116	016B				     skip_activision:									    +
    117				     ;<----------------------------------|   |
    118																    +
    119				     ;										     |
    120	016B				     old_08h:										    +
    121				     ;<--------------------------------------|
    122	016B  5D 07 1F 5F 5E 5A	59+	     pop bp es ds di si	dx cx bx ax					     ;return all    +
    123	      5B 58		     registers after interrupt
    124	0174  EA			     db	0eah										    +
    125				     ;jump to old procedural handler of	09h interrupt
    126	0175  0000			     old08ofs dw 0000h									    +
    127				     ;previous offset
    128	0177  0000			     old08seg dw 0000h									    +
    129				     ;in that segment
    130
    131	0179				     endp
    132
    133				     ;------------------------------------------------------------------------------
    134
    135				     ;------------------------------------------------------------------------------
    136				     ; New procedural handler of 09h interrupt
    137				     ; Entry:		     None
    138				     ; Exit:		     None
    139				     ; Destroyed:    None
    140				     ;------------------------------------------------------------------------------
    141
    142	0179			     New09h  proc
    143
    144	0179  50 53 51 52 56 57	1E+	     push ax bx	cx dx si di ds es bp					     ;save all	    +
    145	      06 55		     registers
    146	0182  0E			     push cs										    +
    147				     ;cs in stack
    148	0183  1F			     pop ds										    +
    149				     ;ds = cs
    150
    151	0184  E4 60			     in	al, 60h										    +
    152				     ;al = scan	code from 60h port
    153	0186  3C 58			     cmp al, 58h									    +
    154				     ;if (al ==	F12) zf	= 1
    155	0188  75 06			     jne skip_open									    +
    156				     ;if (zf !=	1) goto	skip_open ---|
    157	018A  E8 006D				     call MainBorder								    +
    158				     ;Main Border function		     |
    159	018D  EB 0B 90				     jmp old									    +
    160				     ;got old ---------------------------|
    161	0190				     skip_open:										    +
    162				     ;<------------------------------|	     |
    163																    +
    164				     ;									     |
    165	0190  3C 0D			     cmp al, 0dh									    +
    166				     ;if (al ==	'=') zf	= 1			     |
    167	0192  75 06			     jne skip_close									    +
    168				     ;if (zf !=	1) goto	skip_close --|	     |
    169	0194  E8 0011				     call CloseFrame								    +
    170				     ;Close Frame function		     |	     |
    171	0197  EB 01 90				     jmp old									    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 4
resident.asm



    172				     ;goto old ----------------------|	     |
    173	019A				     skip_close:									    +
    174				     ;<------------------------------|	     |
    175																    +
    176				     ;									     |
    177	019A				     old:										    +
    178				     ;<----------------------------------|
    179
    180	019A  5D 07 1F 5F 5E 5A	59+	     pop bp es ds di si	dx cx bx ax					     ;return all    +
    181	      5B 58		     registers after interrupt
    182	01A3  EA			     db	0eah										    +
    183				     ;jump to old procedural handler of	09h interrupt
    184	01A4  0000			     old09ofs dw 0000h									    +
    185				     ;previous offset
    186	01A6  0000			     old09seg dw 0000h									    +
    187				     ;in that segment
    188
    189	01A8				     endp
    190
    191				     ;------------------------------------------------------------------------------
    192
    193				     ;------------------------------------------------------------------------------
    194				     ; Close frame
    195				     ; Entry:		     Active - frame status: 1 -	opened,	0 - closed
    196				     ; Exit:		     None
    197				     ; Destroyed:    Active
    198				     ;------------------------------------------------------------------------------
    199
    200	01A8			     CloseFrame	     proc
    201
    202	01A8  80 3E 03B1r 01		     cmp Active, 1									    +
    203				     ;if (Active == 1) zf = 1
    204	01AD  75 4A			     jne closing									    +
    205				     ;if (zf !=	1) goto	closing
    206
    207	01AF  C6 06 03B1r 00 90		     mov Active, 0									    +
    208				     ;Active = 0
    209	01B5  50 53 51 52 55 56	06	     push ax bx	cx dx bp si es							     ;save  +
    210				     registers
    211	01BC  E8 0116			     call CalcParam									    +
    212				     ;calculate	parameters
    213	01BF  8A 36 03ACr		     mov dh, height									    +
    214				     ;dh = height
    215	01C3  8A 16 03ABr		     mov dl, len									    +
    216				     ;dl = len
    217	01C7  BB B800			     mov bx, video_segment							     ;bx =  +
    218				     0b800h
    219	01CA  8E C3			     mov es, bx										    +
    220				     ;es = video_segment
    221
    222	01CC  8B F7			     mov si, di										    +
    223				     ;si = di |	frame start position in	video memory
    224	01CE  33 C9			     xor cx, cx										    +
    225				     ;cx = 0
    226	01D0  8A CE			     mov cl, dh										    +
    227				     ;cl = dh |	height
    228	01D2  BD 03BBr			     mov bp, offset Buffer							     ;bp =  +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 5
resident.asm



    229				     &Buffer
    230	01D5				     outside_close:									    +
    231				     ;<--------------------------------------------------|
    232	01D5  51				     push cx									    +
    233				     ;save cx |	outside	loop counter					     |
    234																    +
    235				     ;												    +
    236				     |
    237	01D6  33 C9				     xor cx, cx									    +
    238				     ;cx = 0											    +
    239				     |
    240	01D8  8A CA				     mov cl, dl									    +
    241				     ;cl = len											    +
    242				     |
    243																    +
    244				     ;												    +
    245				     |
    246	01DA  56				     push si									    +
    247				     ;save previous string start position			     |
    248	01DB					     inside_close:								    +
    249				     ;<------------------------------------------------------|
    250	01DB  3E: 8B 5E	00				     mov bx, ds:[bp]							    +
    251				     ;bx = ds:[bp] | symbol from memory	to bx			     |	     |
    252	01DF  83 C5 02					     add bp, 2								    +
    253				     ;bp += 2											    +
    254				     |	     |
    255																    +
    256				     ;												    +
    257				     |	     |
    258	01E2  26: 89 1C					     mov es:[si], bx							    +
    259				     ;es:[si] =	bx | out symbol	from bx	to video memory	     |	     |
    260	01E5  83 C6 02					     add si, 2								    +
    261				     ;si += 2											    +
    262				     |	     |
    263	01E8  E2 F1				     loop inside_close								    +
    264				     ;-------------------------------------------------------|
    265																    +
    266				     ;												    +
    267				     |
    268	01EA  5E				     pop si									    +
    269				     ;return string start position					     |
    270	01EB  81 C6 00A0			     add si, 2 * window_len						     ;si += +
    271				     160 | to new line							      |
    272																    +
    273				     ;												    +
    274				     |
    275	01EF  59				     pop cx									    +
    276				     ;return outside loop counter					     |
    277	01F0  E2 E3			     loop outside_close									    +
    278				     ;---------------------------------------------------|
    279
    280	01F2  07 5E 5D 5A 59 5B	58	     pop es si bp dx cx	bx ax							     ;return+
    281				     registers
    282	01F9				     closing:
    283	01F9  C3			     ret										    +
    284				     ;return function value
    285	01FA				     endp										    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 6
resident.asm



    286				     ;proc's ending
    287
    288				     ;------------------------------------------------------------------------------
    289
    290				     ;------------------------------------------------------------------------------
    291				     ; Main program to view frame
    292				     ; Entry:		     None
    293				     ; Exit:		     None
    294				     ; Destroyed:    AX, ES, DX, DI
    295				     ;------------------------------------------------------------------------------
    296
    297	01FA			     MainBorder	     proc
    298
    299	01FA  BF B800			     mov di, video_segment							     ;bx =  +
    300				     video segment position
    301	01FD  8E C7			     mov es, di										    +
    302				     ;es = bx
    303	01FF  33 FF			     xor di, di										    +
    304				     ;di = 0
    305
    306	0201  E8 00D1			     call CalcParam									    +
    307				     ;x_start, y_start,	y_string
    308	0204  8A 26 03ADr		     mov ah, frame_color								    +
    309				     ;ah = 4eh	     | color
    310	0208  BE 03B2r			     mov si, offset DoubleFrameString					     ;si = &style   +
    311				     string
    312
    313	020B  8A 36 03ACr		     mov dh, height									    +
    314				     ;dh = height
    315	020F  8A 16 03ABr		     mov dl, len									    +
    316				     ;dl = len
    317
    318	0213  80 3E 03B1r 01		     cmp Active, 1									    +
    319				     ;if (Active == 1) zf = 1
    320	0218  74 03			     je	skip_memory									    +
    321				     ;if (zf ==	1) goto	skip_memory--|
    322	021A  E8 000D				     call RememberToBuffer							    +
    323				     ;Remember video ram to buffer   |
    324	021D				     skip_memory:									    +
    325				     ;<------------------------------|
    326
    327	021D  E8 013C			     call DrawFrame									    +
    328				     ;Drawing frame
    329	0220  E8 008D			     call DrawString									    +
    330				     ;Drawing string inside frame
    331
    332	0223  C6 06 03B1r 01 90		     mov Active, 1									    +
    333				     ;Active = 1
    334
    335	0229  C3			     ret										    +
    336				     ;return function value
    337	022A				     endp										    +
    338				     ;proc's ending
    339
    340				     ;------------------------------------------------------------------------------
    341
    342				     ;------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 7
resident.asm



    343				     ; Save video fragments under the future frame
    344				     ; Entry:		     DI	- start	of frame in video memory
    345				     ;				     DL	- frame	string length
    346				     ;				     DH	- frame	column size
    347				     ; Exit:		     Buffer
    348				     ; Destroyed:    None
    349				     ;------------------------------------------------------------------------------
    350
    351	022A			     RememberToBuffer proc
    352
    353	022A  50 53 51 52 55 56	06	     push ax bx	cx dx bp si es							     ;save  +
    354				     registers
    355	0231  BB B800			     mov bx, video_segment							     ;bx =  +
    356				     0b800h
    357	0234  8E C3			     mov es, bx										    +
    358				     ;es = video segment
    359
    360	0236  8B F7			     mov si, di										    +
    361				     ;si = di
    362	0238  33 C9			     xor cx, cx										    +
    363				     ;cx = 0
    364	023A  8A CE			     mov cl, dh										    +
    365				     ;cl = dh |	height
    366	023C  BD 03BBr			     mov bp, offset Buffer							     ;bp =  +
    367				     &Buffer
    368	023F				     outside:										    +
    369				     ;
    370	023F  51				     push cx
    371
    372	0240  33 C9				     xor cx, cx
    373	0242  8A CA				     mov cl, dl
    374
    375	0244  56				     push si
    376	0245					     inside:
    377	0245  26: 8B 1C					     mov bx, es:[si]
    378	0248  83 C6 02					     add si, 2
    379
    380	024B  3E: 89 5E	00				     mov ds:[bp], bx
    381	024F  83 C5 02					     add bp, 2
    382	0252  E2 F1				     loop inside
    383
    384	0254  5E				     pop si
    385	0255  81 C6 00A0			     add si, 2 * window_len
    386
    387	0259  59				     pop cx
    388	025A  E2 E3			     loop outside
    389
    390	025C  07 5E 5D 5A 59 5B	58	     pop es si bp dx cx	bx ax
    391	0263  C3			     ret										    +
    392				     ;return function value
    393	0264				     endp										    +
    394				     ;proc's ending
    395
    396				     ;------------------------------------------------------------------------------
    397
    398				     ;------------------------------------------------------------------------------
    399				     ; Convert hex to ascii code
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 8
resident.asm



    400				     ; Entry:		     AL	- converted symbol
    401				     ; Exit:		     AL	- result of converting
    402				     ; Destroyed:    AL
    403				     ;------------------------------------------------------------------------------
    404
    405	0264			     htoa    proc
    406
    407	0264  3C 0A			     cmp al, 10										    +
    408				     ;if (al - 10 < 0) zs = 1
    409	0266  73 02			     jae letter										    +
    410				     ;if (zs ==	0) goto	letter --|
    411	0268  72 05			     jb	digit										    +
    412				     ;if (zs ==	1) goto	digit ---|-|
    413																    +
    414				     ;							     | |
    415	026A				     letter:										    +
    416				     ;<--------------------------| |
    417	026A  04 37				     add al, 'A' - 10								    +
    418				     ;al += 'A'	- 10			       |
    419	026C  EB 06 90				     jmp ending									    +
    420				     ;-----------------------------|-|
    421	026F				     digit:										    +
    422				     ;<----------------------------| |
    423	026F  04 30				     add al, '0'								    +
    424				     ;al += '0'						     |
    425	0271  EB 01 90				     jmp ending									    +
    426				     ;-------------------------------|
    427																    +
    428				     ;								     |
    429	0274				     ending:										    +
    430				     ;<------------------------------|
    431	0274  C3			     ret										    +
    432				     ;return function value
    433	0275				     endp										    +
    434				     ;proc's ending
    435
    436				     ;------------------------------------------------------------------------------
    437
    438				     ;------------------------------------------------------------------------------
    439				     ; Print register value
    440				     ; Entry:		     BX	- right	offset on register in stack segment
    441				     ; Exit:		     None
    442				     ; Destroyed:    AL
    443				     ;------------------------------------------------------------------------------
    444
    445	0275			     RegVal  proc
    446
    447	0275  51			     push cx										    +
    448				     ;save cx -	amount of symbols in register name
    449	0276  53			     push bx										    +
    450				     ;save bx -	right offset of	register in stack segment
    451	0277  B9 0002			     mov cx, 0002d									    +
    452				     ;cx = 0002h
    453
    454	027A				     half:										    +
    455				     ;<------------------------------|
    456	027A  2B D9				     sub bx, cx									    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 9
resident.asm



    457				     ;bx -= cx						     |
    458	027C  83 C3 02				     add bx, 2									    +
    459				     ;bx += 2						     |
    460																    +
    461				     ;|----|----|				     |
    462	027F  36: 8A 07				     mov al, ss:[bx]								    +
    463				     ; high low	| al = low		     |
    464	0282  D0 E8 D0 E8 D0 E8	D0+		     shr al, 4									    +
    465	      E8		     ;al /= 16						     |
    466	028A  E8 FFD7				     call htoa									    +
    467				     ;hex al to	ascii				     |
    468	028D  AB				     stosw									    +
    469				     ;mov es:[di], ax /	add di,	2    |
    470																    +
    471				     ;|----|----|				     |
    472	028E  36: 8A 07				     mov al, ss:[bx]								    +
    473				     ; high low	| al = high		     |
    474	0291  24 0F				     and al, 0fh								    +
    475				     ;al && 00001111h				     |
    476	0293  E8 FFCE				     call htoa									    +
    477				     ;hex al to	ascii				     |
    478	0296  AB				     stosw									    +
    479				     ;mov es:[di], ax /	add di,	2    |
    480	0297  E2 E1			     loop half										    +
    481				     ;-------------------------------|
    482
    483	0299  5B			     pop bx										    +
    484				     ;return bx
    485	029A  59			     pop cx										    +
    486				     ;return cx
    487
    488	029B  C3			     ret										    +
    489				     ;return function value
    490	029C				     endp										    +
    491				     ;proc's ending
    492
    493				     ;------------------------------------------------------------------------------
    494
    495				     ;------------------------------------------------------------------------------
    496				     ; Print information about one register
    497				     ; Entry:		     SI	- address of string to current register	name
    498				     ;				     DI	- place	on the screen where will be register value
    499				     ; Exit:		     None
    500				     ; Destroyed:    DI, SI, AL
    501				     ;------------------------------------------------------------------------------
    502
    503	029C			     OneRegister     proc
    504
    505	029C  57			     push di										    +
    506				     ;save di -	previous offset	on screen
    507	029D  51			     push cx										    +
    508				     ;save cx -	loop counter for all registers
    509
    510	029E  B9 0003			     mov cx, 0003d									    +
    511				     ;cx = 3 | amount of symbols in any	register name: 'xx '
    512
    513	02A1				     register_name:									    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 10
resident.asm



    514				     ;<------------------------------|
    515	02A1  AC				     lodsb									    +
    516				     ;mov al, ds:[si]				     |
    517	02A2  AB				     stosw									    +
    518				     ;mov es:[di], ax /	add di,	2    |
    519	02A3  E2 FC			     loop register_name									    +
    520				     ;-------------------------------|
    521	02A5  46			     inc si										    +
    522				     ;si += 1
    523
    524	02A6  E8 FFCC			     call RegVal									    +
    525				     ;print register value
    526
    527	02A9  59			     pop cx										    +
    528				     ;return cx
    529	02AA  5F			     pop di										    +
    530				     ;return di
    531	02AB  81 C7 00A0		     add di, 0002d * window_len							     ;di += +
    532				     80	* 2
    533
    534	02AF  C3			     ret										    +
    535				     ;return function value
    536	02B0				     endp										    +
    537				     ;proc's ending
    538
    539				     ;------------------------------------------------------------------------------
    540
    541				     ;------------------------------------------------------------------------------
    542				     ; Draw registers inside the frame
    543				     ; Entry:		     SI	- first	register name string address
    544				     ; Exit:		     None
    545				     ; Destroyed:    CX, AX, BX
    546				     ;------------------------------------------------------------------------------
    547
    548	02B0			     DrawString	     proc
    549
    550	02B0  55			     push bp										    +
    551				     ;save bp
    552	02B1  BD 0627r			     mov bp, offset AXString							     ;bp =  +
    553				     &AXString
    554	02B4  8B F5			     mov si, bp										    +
    555				     ;si = bp
    556	02B6  5D			     pop bp										    +
    557				     ;return bp
    558
    559	02B7  51			     push cx										    +
    560				     ;save cx
    561	02B8  B9 0007			     mov cx, 0007d									    +
    562				     ;cx = 0007h | register name len (3) + register value (4)
    563	02BB  E8 0060			     call EvalShift									    +
    564				     ;calculate	first inside string position
    565	02BE  59			     pop cx										    +
    566				     ;return cx
    567
    568	02BF  B9 0008 90		     mov cx, reg_in_frame							     ;cx = 8+
    569				     | amount registers	in frame
    570
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 11
resident.asm



    571	02C3  8B DC			     mov bx, sp										    +
    572				     ;bx = sp
    573	02C5  83 C3 10 90		     add bx, 2 * reg_in_frame							     ;bx += +
    574				     ax	- pointer on ax	register in stack
    575	02C9  83 C3 04			     add bx, 4
    576
    577	02CC				     all_registers:									    +
    578				     ;<------------------------------|
    579	02CC  E8 FFCD				     call OneRegister								    +
    580				     ;Print one	register information |
    581	02CF  83 EB 02				     sub bx, 0002d								    +
    582				     ;bx -= 0002h - next register    |
    583	02D2  E2 F8			     loop all_registers									    +
    584				     ;-------------------------------|
    585
    586	02D4  C3			     ret										    +
    587				     ;return function value
    588	02D5				     endp										    +
    589				     ;proc's ending
    590
    591				     ;------------------------------------------------------------------------------
    592
    593				     ;------------------------------------------------------------------------------
    594				     ; Calculate values	of variables: x_start, y_start,	y_string
    595				     ; Entry:		     None
    596				     ; Exit:		     None
    597				     ; Destroyed:    AX, BX, DX, BP
    598				     ;------------------------------------------------------------------------------
    599
    600	02D5			     CalcParam	     proc
    601
    602	02D5  50			     push ax										    +
    603				     ;save ax
    604	02D6  32 E4			     xor ah, ah										    +
    605				     ;ah = 0
    606	02D8  A0 03ABr			     mov al, len									    +
    607				     ;al = len
    608	02DB  8A 16 03ACr		     mov dl, height									    +
    609				     ;dl = height
    610	02DF  C6 06 03AEr 28 90		     mov x_start, window_len / 2							    +
    611				     ;x_start =	40
    612	02E5  D1 E8			     shr ax, 1										    +
    613				     ;ax /= 2
    614	02E7  28 06 03AEr		     sub x_start, al									    +
    615				     ;x_start -= len / 2
    616	02EB  58			     pop ax										    +
    617				     ;return ax
    618
    619	02EC  B3 0C			     mov bl, window_height / 2							     ;bp =  +
    620				     25	/ 2
    621	02EE  88 1E 03AFr		     mov y_start, bl									    +
    622				     ;y_start =	25 / 2
    623	02F2  D1 EA			     shr dx, 1										    +
    624				     ;dx /= 2
    625	02F4  28 16 03AFr		     sub y_start, dl									    +
    626				     ;y_start -= height	/ 2
    627
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 12
resident.asm



    628	02F8  8A 1E 03AFr		     mov bl, y_start									    +
    629				     ;bp = y_start
    630	02FC  FE C3			     inc bl										    +
    631				     ;bl += 1
    632	02FE  88 1E 03B0r		     mov y_string, bl									    +
    633				     ;y_string = y_start + 1
    634
    635	0302  33 FF			     xor di, di										    +
    636				     ;di = 0;
    637
    638	0304  32 E4			     xor ah, ah										    +
    639				     ;ah = 0
    640	0306  A0 03AFr			     mov al, y_start									    +
    641				     ;al = y_start
    642	0309  D0 E0			     shl al, 1										    +
    643				     ;al *= 2
    644	030B  BD 0050			     mov bp, window_len									    +
    645				     ;bp = 80
    646	030E  52			     push dx										    +
    647				     ;save size	of frame in stack
    648	030F  F7 E5			     mul bp										    +
    649				     ;ax = 2 * y_start * 80
    650	0311  5A			     pop dx										    +
    651				     ;return size of frame from	stack to dx
    652	0312  8B F8			     mov di, ax										    +
    653				     ;di = ax
    654	0314  A0 03AEr			     mov al, x_start									    +
    655				     ;ax = x_start
    656	0317  D0 E0			     shl al, 1										    +
    657				     ;ax *= 2
    658	0319  32 E4			     xor ah, ah										    +
    659				     ;ah = 0
    660	031B  03 F8			     add di, ax										    +
    661				     ;di += 2 *	x_start
    662
    663	031D  C3			     ret										    +
    664				     ;return function value
    665	031E				     endp										    +
    666				     ;proc's ending
    667
    668				     ;------------------------------------------------------------------------------
    669
    670				     ;------------------------------------------------------------------------------
    671				     ; Eval shift of frame inside string
    672				     ; Entry:		     CX	= string length
    673				     ; Exit:		     None
    674				     ; Destroyed:    DI, BP, AX, BX
    675				     ;------------------------------------------------------------------------------
    676
    677	031E			     EvalShift	     proc
    678
    679	031E  50 53 55			     push ax bx	bp									    +
    680				     ;save ax bx bp
    681
    682					     ;di = y_string * window_len * 2 + (x_start	+ (cx -	len) / 2) * 2
    683	0321  A0 03B0r			     mov al, y_string									    +
    684				     ;al = y_string
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 13
resident.asm



    685	0324  D0 E0			     shl al, 1										    +
    686				     ;al *= 2
    687	0326  32 E4			     xor ah, ah										    +
    688				     ;ah = 0
    689	0328  BD 0050			     mov bp, window_len									    +
    690				     ;bp = 80
    691	032B  52			     push dx										    +
    692				     ;save size	of frame in stack
    693	032C  F7 E5			     mul bp										    +
    694				     ;ax = 2 * y_start * 80
    695	032E  5A			     pop dx										    +
    696				     ;return size of frame from	stack to dx≈
    697	032F  8B F8			     mov di, ax										    +
    698				     ;di = ax
    699
    700	0331  32 E4			     xor ah, ah										    +
    701				     ;ah = 0
    702	0333  32 FF			     xor bh, bh										    +
    703				     ;bh = 0
    704	0335  A0 03AEr			     mov al, x_start									    +
    705				     ;al = x_start
    706	0338  BD 03ABr			     mov bp, offset len									    +
    707				     ;bp = &len
    708	033B  8A 1E 03ABr		     mov bl, len									    +
    709				     ;bl = len
    710	033F  2A D9			     sub bl, cl										    +
    711				     ;bl -= cl
    712	0341  D0 EB			     shr bl, 1										    +
    713				     ;bl = (cx - len) /	2
    714	0343  02 C3			     add al, bl										    +
    715				     ;x_start += (cx - len) / 2
    716	0345  D0 E0			     shl al, 1										    +
    717				     ;al *= 2
    718	0347  03 F8			     add di, ax										    +
    719				     ;di += al
    720
    721	0349  D1 EF			     shr di, 1										    +
    722				     ;di /= 2
    723	034B  D1 E7			     shl di, 1										    +
    724				     ;di *= 2
    725
    726	034D  5D 5B 58			     pop bp bx ax									    +
    727				     ;return bp	bx ax
    728
    729	0350  C3			     ret										    +
    730				     ;return function value
    731	0351				     endp										    +
    732				     ;proc's ending
    733
    734				     ;------------------------------------------------------------------------------
    735
    736				     ;------------------------------------------------------------------------------
    737				     ; Eval string length with '$' terminal symbol
    738				     ; Entry:		     SI	= data string address
    739				     ; Exit:		     CX
    740				     ; Destroyed:    SI, AL, CX
    741				     ;------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 14
resident.asm



    742
    743	0351			     StrLen  proc
    744
    745	0351				     str_len:										    +
    746				     ;<------------------------------|
    747	0351  AC				     lodsb									    +
    748				     ;mov al, ds:[si]				     |
    749	0352  3C 24				     cmp al, '$'								    +
    750				     ;if (al ==	'$') zf	= 1		     |
    751	0354  74 05				     jz	end_str_len								    +
    752				     ;if (zf ==	1) goto	end_str_len  |
    753	0356  83 C1 02				     add cx, 2									    +
    754				     ;cx += 2						     |
    755	0359  E2 F6			     loop str_len									    +
    756				     ;-------------------------------|
    757	035B				     end_str_len:									    +
    758				     ;label of str len ending
    759
    760	035B  C3			     ret										    +
    761				     ;return function value
    762	035C				     endp										    +
    763				     ;proc's ending
    764
    765				     ;------------------------------------------------------------------------------
    766
    767				     ;------------------------------------------------------------------------------
    768				     ; Draw frame with size: len, height
    769				     ; Entry:		     SI	= data string address
    770				     ;				     DH	= frame	height
    771				     ;				     DL	= frame	len
    772				     ; Exit:		     None
    773				     ; Destroyed:    BX, CX, DI
    774				     ;------------------------------------------------------------------------------
    775
    776	035C			     DrawFrame	     proc
    777
    778	035C  50 53 51 52 56 57	55	     push ax bx	cx dx si di bp							     ;save  +
    779				     ax	bx cx dx si di bx
    780
    781	0363  E8 0025			     call PrintString									    +
    782				     ;print string
    783
    784	0366  8A CE			     mov cl, dh										    +
    785				     ;loop on length of	frame string
    786	0368  32 ED			     xor ch, ch										    +
    787				     ;ch = 0
    788	036A  83 E9 02			     sub cx, 2										    +
    789				     ;without first and	lsat symbols of	string
    790	036D				     cycle1:										    +
    791				     ;<--------------------------|
    792	036D  81 C7 00A0			     add di, window_len	* 2						     ;di += +
    793				     window_len	* 2	      |
    794	0371  E8 0017				     call PrintString								    +
    795				     ;print string			     |
    796	0374  83 EE 03				     sub si, 3									    +
    797				     ;si -= 3					     |
    798	0377  E2 F4			     loop cycle1									    +
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 15
resident.asm



    799				     ;---------------------------|
    800	0379  83 C6 03			     add si, 3										    +
    801				     ;si += 3
    802
    803	037C  81 C7 00A0		     add di, window_len	* 2							     ;di += +
    804				     window_len	* 2 (next line)
    805	0380  E8 0008			     call PrintString									    +
    806				     ;print string
    807
    808	0383  5D 5F 5E 5A 59 5B	58	     pop bp di si dx cx	bx ax							     ;return+
    809				     bp	di si dx cx bx ax
    810
    811	038A  C3			     ret										    +
    812				     ;return function value
    813	038B				     endp										    +
    814				     ;proc's ending
    815
    816				     ;------------------------------------------------------------------------------
    817
    818				     ;------------------------------------------------------------------------------
    819				     ; Draws string to console in format: s1s2....s2s3
    820				     ; Entry:		     SI	= string address
    821				     ;				     DL	= string len
    822				     ; Exit:		     None
    823				     ; Destroyed:    AX, BX, CX, SI
    824				     ;------------------------------------------------------------------------------
    825
    826	038B			     PrintString     proc
    827
    828	038B  8A 26 03ADr		     mov ah, frame_color								    +
    829				     ;set symbols color
    830
    831	038F  AC			     lodsb										    +
    832				     ;mov al, ds:[si]
    833	0390  AB			     stosw										    +
    834				     ;mov es:[di], ax /	add di,	2
    835
    836	0391  51			     push cx										    +
    837				     ;save prev	loop cnt
    838	0392  33 C9			     xor cx, cx										    +
    839				     ;cx = 0
    840	0394  8A CA			     mov cl, dl										    +
    841				     ;counter =	dl
    842	0396  80 E9 02			     sub cl, 2										    +
    843				     ;without top and bottom line
    844	0399  8A 04			     mov al, [si]									    +
    845				     ;al = [si]
    846	039B				     cycle:										    +
    847				     ;<------------------------------|
    848	039B  AB				     stosw									    +
    849				     ;mov es:[di], ax /	add di,	2    |
    850	039C  E2 FD			     loop cycle										    +
    851				     ;-------------------------------|
    852	039E  46			     inc si										    +
    853				     ;bx++
    854	039F  59			     pop cx										    +
    855				     ;return prev loop cnt
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 16
resident.asm



    856
    857	03A0  AC			     lodsb										    +
    858				     ;mov al, ds:[si]
    859	03A1  AB			     stosw										    +
    860				     ;mov es:[di], ax /	add di,	2
    861
    862	03A2  8A DA			     mov bl, dl										    +
    863				     ;bl = dl
    864	03A4  32 FF			     xor bh, bh										    +
    865				     ;bh = 0
    866	03A6  D1 E3			     shl bx, 1										    +
    867				     ;bx *= 2
    868	03A8  2B FB			     sub di, bx										    +
    869				     ;set di to	line beginning
    870
    871	03AA  C3			     ret										    +
    872				     ;return function value
    873	03AB				     endp										    +
    874				     ;proc's ending
    875
    876				     ;------------------------------------------------------------------------------
    877
    878	03AB  1F		     len			     db	31							    +
    879				     ;frame row	length
    880	03AC  0A		     height			     db	10							    +
    881				     ;frame column height
    882	03AD  4E		     frame_color	     db	4eh							     ;frame +
    883				     element color
    884
    885	03AE  00		     x_start			     db	0							    +
    886				     ;x	frame start position
    887	03AF  00		     y_start			     db	0							    +
    888				     ;y	frame start position
    889	03B0  00		     y_string			     db	0							    +
    890				     ;y	string start position
    891	      =0008		     reg_in_frame	     equ 8							     ;amount+
    892				     of	registers in frame
    893	03B1  00		     Active			     db	0							    +
    894				     ;frame status
    895
    896	03B2  C9 CD BB BA 20 BA	C8+  DoubleFrameString	     db	0c9h, 0cdh, 0bbh, 0bah,	020h, 0bah, 0c8h, 0cdh,	0bch
    897	      CD BC
    898	03BB  0136*(0000)	     Buffer dw 31 * 10 dup (0)
    899
    900	0627  61 78 20 24	     AXString			     db	"ax $"							    +
    901				     ;registers	names
    902	062B  62 78 20 24	     BXString			     db	"bx $"
    903	062F  63 78 20 24	     CXString			     db	"cx $"
    904	0633  64 78 20 24	     DXString			     db	"dx $"
    905	0637  73 69 20 24	     SIString			     db	"si $"
    906	063B  64 69 20 24	     DIString			     db	"di $"
    907	063F  64 73 20 24	     DSString			     db	"ds $"
    908	0643  65 73 20 24	     ESString			     db	"es $"
    909
    910	0647			     EOP:
    911				     end     Start										    +
    912				     ;prog's ending
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 17
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/27/25"
??FILENAME			  Text	 "resident"
??TIME				  Text	 "23:41:27"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RESIDENT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACTIVE				  Byte	 DGROUP:03B1
ALL_REGISTERS			  Near	 DGROUP:02CC
AXSTRING			  Byte	 DGROUP:0627
BUFFER				  Word	 DGROUP:03BB
BXSTRING			  Byte	 DGROUP:062B
CALCPARAM			  Near	 DGROUP:02D5
CLOSEFRAME			  Near	 DGROUP:01A8
CLOSING				  Near	 DGROUP:01F9
CXSTRING			  Byte	 DGROUP:062F
CYCLE				  Near	 DGROUP:039B
CYCLE1				  Near	 DGROUP:036D
DIGIT				  Near	 DGROUP:026F
DISTRING			  Byte	 DGROUP:063B
DOUBLEFRAMESTRING		  Byte	 DGROUP:03B2
DRAWFRAME			  Near	 DGROUP:035C
DRAWSTRING			  Near	 DGROUP:02B0
DSSTRING			  Byte	 DGROUP:063F
DXSTRING			  Byte	 DGROUP:0633
ENDING				  Near	 DGROUP:0274
END_STR_LEN			  Near	 DGROUP:035B
EOP				  Near	 DGROUP:0647
ESSTRING			  Byte	 DGROUP:0643
EVALSHIFT			  Near	 DGROUP:031E
FRAME_COLOR			  Byte	 DGROUP:03AD
HALF				  Near	 DGROUP:027A
HEIGHT				  Byte	 DGROUP:03AC
HTOA				  Near	 DGROUP:0264
INSIDE				  Near	 DGROUP:0245
INSIDE_CLOSE			  Near	 DGROUP:01DB
LEN				  Byte	 DGROUP:03AB
LETTER				  Near	 DGROUP:026A
MAINBORDER			  Near	 DGROUP:01FA
NEW08H				  Near	 DGROUP:0153
NEW09H				  Near	 DGROUP:0179
OLD				  Near	 DGROUP:019A
OLD08OFS			  Word	 DGROUP:0175
OLD08SEG			  Word	 DGROUP:0177
OLD09OFS			  Word	 DGROUP:01A4
Turbo Assembler	 Version 4.1	    02/27/25 23:41:27	    Page 18
Symbol Table



OLD09SEG			  Word	 DGROUP:01A6
OLD_08H				  Near	 DGROUP:016B
ONEREGISTER			  Near	 DGROUP:029C
OUTSIDE				  Near	 DGROUP:023F
OUTSIDE_CLOSE			  Near	 DGROUP:01D5
PRINTSTRING			  Near	 DGROUP:038B
REGISTER_NAME			  Near	 DGROUP:02A1
REGVAL				  Near	 DGROUP:0275
REG_IN_FRAME			  Number 0008
REMEMBERTOBUFFER		  Near	 DGROUP:022A
SISTRING			  Byte	 DGROUP:0637
SKIP_ACTIVISION			  Near	 DGROUP:016B
SKIP_CLOSE			  Near	 DGROUP:019A
SKIP_MEMORY			  Near	 DGROUP:021D
SKIP_OPEN			  Near	 DGROUP:0190
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:0351
STR_LEN				  Near	 DGROUP:0351
VIDEO_SEGMENT			  Number B800
WINDOW_HEIGHT			  Number 0019
WINDOW_LEN			  Number 0050
X_START				  Byte	 DGROUP:03AE
Y_START				  Byte	 DGROUP:03AF
Y_STRING			  Byte	 DGROUP:03B0

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0647 Word	  Public  CODE
