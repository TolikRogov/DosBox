Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 1
test.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;				     It	is impossible to debug!	SO...SI...DI...SS
      3				     ;			     @Rogov Anatoliy 25.02.2025	"When will I delete DOSBox?"
      4				     ;------------------------------------------------------------------------------
      5
      6	      =B800		     video_segment	     = 0b800h							     ;video +
      7				     segment
      8	      =0050		     window_len			     = 80							    +
      9				     ;window row length
     10	      =0019		     window_height	     = 25							     ;window+
     11				     column height
     12
     13	0000			     .model tiny										    +
     14				     ;set 64 Kb	model
     15	0000			     .code											    +
     16				     ;define code block
     17				     org 100h											    +
     18				     ;prog's beginning ram block
     19
     20	0100			     Start:
     21																    +
     22				     ;==============================================================================================
     23	0100  B9 FFFF			     mov cx, 0ffffh
     24	0103				     inf_loop:
     25	0103  B8 1111				     mov ax, 1111h
     26	0106  BB 2222				     mov bx, 2222h
     27	0109  B9 3333				     mov cx, 3333h
     28	010C  BA 4444				     mov dx, 4444h
     29	010F  E4 60				     in	al, 60h
     30	0111  E2 F0			     loop inf_loop
     31	0113  B8 4C00			     mov ax, 4c00h
     32	0116  CD 21			     int 21h										    +
     33				     ;31 function of 21	interrupt
     34
     35				     ;------------------------------------------------------------------------------
     36				     ; New procedural handler of 08h interrupt - timer
     37				     ; Entry:		     None
     38				     ; Exit:		     None
     39				     ; Destroyed:    None
     40				     ;------------------------------------------------------------------------------
     41
     42	0118			     New08h  proc
     43
     44	0118  50 53 51 52 56 57	1E+	     push ax bx	cx dx si di ds es bp					     ;save all	    +
     45	      06 55		     registers
     46	0121  0E			     push cs										    +
     47				     ;cs in stack
     48	0122  1F			     pop ds										    +
     49				     ;ds = cs
     50
     51	0123  80 3E 039Fr 01		     cmp Active, 1									    +
     52				     ;if (Active == 1) zf = 1
     53	0128  75 06			     jne skip_activision								    +
     54				     ;if (zf !=	1) goto	skip_activision--|
     55	012A  E8 00A2				     call MainBorder								    +
     56				     ;Main Border function			     |
     57	012D  EB 01 90				     jmp old_08h								    +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 2
test.asm



     58				     ;goto old_08h ----------------------|---|
     59	0130				     skip_activision:									    +
     60				     ;<----------------------------------|   |
     61																    +
     62				     ;										     |
     63	0130				     old_08h:										    +
     64				     ;<--------------------------------------|
     65	0130  5D 07 1F 5F 5E 5A	59+	     pop bp es ds di si	dx cx bx ax					     ;return all    +
     66	      5B 58		     registers after interrupt
     67	0139  EA			     db	0eah										    +
     68				     ;jump to old procedural handler of	09h interrupt
     69	013A  0000			     old08ofs dw 0000h									    +
     70				     ;previous offset
     71	013C  0000			     old08seg dw 0000h									    +
     72				     ;in that segment
     73
     74	013E				     endp
     75
     76				     ;------------------------------------------------------------------------------
     77
     78				     ;------------------------------------------------------------------------------
     79				     ; New procedural handler of 09h interrupt
     80				     ; Entry:		     None
     81				     ; Exit:		     None
     82				     ; Destroyed:    None
     83				     ;------------------------------------------------------------------------------
     84
     85	013E			     New09h  proc
     86
     87	013E  50 53 51 52 56 57	1E+	     push ax bx	cx dx si di ds es bp					     ;save all	    +
     88	      06 55		     registers
     89	0147  0E			     push cs										    +
     90				     ;cs in stack
     91	0148  1F			     pop ds										    +
     92				     ;ds = cs
     93
     94	0149  E4 60			     in	al, 60h										    +
     95				     ;al = scan	code from 60h port
     96	014B  3C 58			     cmp al, 58h									    +
     97				     ;if (al ==	F12) zf	= 1
     98	014D  75 06			     jne skip_open									    +
     99				     ;if (zf !=	1) goto	skip_open ---|
    100	014F  E8 007D				     call MainBorder								    +
    101				     ;Main Border function		     |
    102	0152  EB 08 90				     jmp old									    +
    103				     ;got old ---------------------------|
    104	0155				     skip_open:										    +
    105				     ;<------------------------------|	     |
    106																    +
    107				     ;									     |
    108	0155  3C 0D			     cmp al, 0dh									    +
    109				     ;if (al ==	'=') zf	= 1			     |
    110	0157  75 03			     jne skip_close									    +
    111				     ;if (zf !=	1) goto	skip_close --|	     |
    112						     ;call CloseFrame								    +
    113				     ;Close Frame function		     |	     |
    114	0159  EB 01 90				     jmp old									    +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 3
test.asm



    115				     ;goto old ----------------------|	     |
    116	015C				     skip_close:									    +
    117				     ;<------------------------------|	     |
    118																    +
    119				     ;									     |
    120	015C				     old:										    +
    121				     ;<----------------------------------|
    122
    123	015C  5D 07 1F 5F 5E 5A	59+	     pop bp es ds di si	dx cx bx ax					     ;return all    +
    124	      5B 58		     registers after interrupt
    125	0165  EA			     db	0eah										    +
    126				     ;jump to old procedural handler of	09h interrupt
    127	0166  0000			     old09ofs dw 0000h									    +
    128				     ;previous offset
    129	0168  0000			     old09seg dw 0000h									    +
    130				     ;in that segment
    131
    132	016A				     endp
    133
    134				     ;------------------------------------------------------------------------------
    135
    136				     ;------------------------------------------------------------------------------
    137				     ; Close frame
    138				     ; Entry:		     Active - frame status: 1 -	opened,	0 - closed
    139				     ; Exit:		     None
    140				     ; Destroyed:    AX, Active
    141				     ;------------------------------------------------------------------------------
    142
    143	016A			     CloseFrame	     proc
    144
    145	016A  80 3E 039Fr 01		     cmp Active, 1									    +
    146				     ;if (Active == 1) zf = 1
    147	016F  75 5D			     jne closing									    +
    148				     ;if (zf !=	1) goto	closing
    149
    150	0171  50 53 51 52 55 56	06	     push ax bx	cx dx bp si es
    151	0178  E8 0148			     call CalcParam
    152	017B  8A 36 039Ar		     mov dh, height
    153	017F  8A 16 0399r		     mov dl, len
    154
    155	0183  BB B800			     mov bx, video_segment
    156	0186  8E C3			     mov es, bx
    157
    158	0188  8B F7			     mov si, di
    159	018A  33 C9			     xor cx, cx
    160	018C  8A CE			     mov cl, dh
    161	018E				     outside_close:
    162	018E  33 C0				     xor ax, ax
    163	0190  8A C6				     mov al, dh
    164	0192  2A C1				     sub al, cl
    165	0194  52				     push dx
    166	0195  F6 E2				     mul dl
    167	0197  5A				     pop dx
    168
    169	0198  51				     push cx
    170
    171	0199  33 C9				     xor cx, cx
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 4
test.asm



    172	019B  8A CA				     mov cl, dl
    173	019D  33 ED				     xor bp, bp
    174
    175	019F  56				     push si
    176	01A0					     inside_close:
    177							     ;bp = &Buffer + (dh - cl) * dl + (dl - cx)
    178	01A0  52					     push dx
    179	01A1  32 F6					     xor dh, dh
    180	01A3  8B EA					     mov bp, dx
    181	01A5  5A					     pop dx
    182	01A6  2B E9					     sub bp, cx
    183							     ;shl bp, 2
    184	01A8  03 E8					     add bp, ax
    185	01AA  81 C5 03A9r				     add bp, offset Buffer
    186	01AE  8B 5E 00					     mov bx, [bp]
    187	01B1  26: 89 1C					     mov es:[si], bx
    188	01B4  83 C6 02					     add si, 2
    189	01B7  E2 E7				     loop inside_close
    190
    191	01B9  5E				     pop si
    192	01BA  81 C6 00A0			     add si, 2 * window_len
    193
    194	01BE  59				     pop cx
    195	01BF  E2 CD			     loop outside_close
    196
    197	01C1  07 5E 5D 5A 59 5B	58	     pop es si bp dx cx	bx ax
    198	01C8  C6 06 039Fr 00 90		     mov Active, 0									    +
    199				     ;Active = 0
    200
    201	01CE				     closing:
    202	01CE  C3			     ret										    +
    203				     ;return function value
    204	01CF				     endp										    +
    205				     ;proc's ending
    206
    207				     ;------------------------------------------------------------------------------
    208
    209				     ;------------------------------------------------------------------------------
    210				     ; Main program to view frame
    211				     ; Entry:		     None
    212				     ; Exit:		     None
    213				     ; Destroyed:    AX, ES, DX, DI
    214				     ;------------------------------------------------------------------------------
    215
    216	01CF			     MainBorder	     proc
    217
    218	01CF  BF B800			     mov di, video_segment							     ;bx =  +
    219				     video segment position
    220	01D2  8E C7			     mov es, di										    +
    221				     ;es = bx
    222	01D4  33 FF			     xor di, di										    +
    223				     ;di = 0
    224
    225	01D6  E8 00EA			     call CalcParam									    +
    226				     ;x_start, y_start,	y_string
    227	01D9  8A 26 039Br		     mov ah, frame_color								    +
    228				     ;ah = 4eh	     | color
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 5
test.asm



    229	01DD  BE 03A0r			     mov si, offset DoubleFrameString					     ;si = &style   +
    230				     string
    231
    232	01E0  8A 36 039Ar		     mov dh, height									    +
    233				     ;dh = height
    234	01E4  8A 16 0399r		     mov dl, len									    +
    235				     ;dl = len
    236
    237	01E8  80 3E 039Fr 01		     cmp Active, 1
    238	01ED  74 03			     je	skip_memory
    239	01EF  E8 000D				     call RememberToBuffer							    +
    240				     ;Remember video ram to buffer
    241	01F2				     skip_memory:
    242
    243	01F2  E8 0155			     call DrawFrame									    +
    244				     ;Drawing frame
    245	01F5  E8 00A2			     call DrawString									    +
    246				     ;Drawing string inside frame
    247
    248	01F8  C6 06 039Fr 01 90		     mov Active, 1									    +
    249				     ;Active = 1
    250
    251	01FE  C3			     ret										    +
    252				     ;return function value
    253	01FF				     endp										    +
    254				     ;proc's ending
    255
    256				     ;------------------------------------------------------------------------------
    257
    258				     ;------------------------------------------------------------------------------
    259				     ; Save video fragments under the future frame
    260				     ; Entry:		     DI
    261				     ;				     DL
    262				     ;				     DH
    263				     ; Exit:
    264				     ; Destroyed:
    265				     ;------------------------------------------------------------------------------
    266
    267	01FF			     RememberToBuffer proc
    268
    269	01FF  50 53 51 52 55 56	06	     push ax bx	cx dx bp si es
    270
    271	0206  BB B800			     mov bx, video_segment
    272	0209  8E C3			     mov es, bx
    273
    274	020B  8B F7			     mov si, di
    275	020D  33 C9			     xor cx, cx
    276	020F  8A CE			     mov cl, dh
    277	0211				     outside:
    278	0211  33 C0				     xor ax, ax
    279	0213  8A C6				     mov al, dh
    280	0215  2A C1				     sub al, cl
    281	0217  52				     push dx
    282	0218  F6 E2				     mul dl
    283	021A  5A				     pop dx
    284
    285	021B  51				     push cx
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 6
test.asm



    286
    287	021C  33 C9				     xor cx, cx
    288	021E  8A CA				     mov cl, dl
    289	0220  33 ED				     xor bp, bp
    290
    291	0222  56				     push si
    292	0223					     inside:
    293							     ;bp = &Buffer + (dh - cl) * dl + (dl - cx)	* 2
    294	0223  52					     push dx
    295	0224  32 F6					     xor dh, dh
    296	0226  8B EA					     mov bp, dx
    297	0228  5A					     pop dx
    298	0229  2B E9					     sub bp, cx
    299	022B  03 E8					     add bp, ax
    300	022D  D1 E5					     shl bp, 1
    301	022F  81 C5 03A9r				     add bp, offset Buffer
    302
    303	0233  26: 8B 1C					     mov bx, es:[si]
    304	0236  89 5E 00					     mov [bp], bx
    305	0239  83 C6 02					     add si, 2
    306	023C  E2 E5				     loop inside
    307
    308	023E  5E				     pop si
    309	023F  81 C6 00A0			     add si, 2 * window_len
    310
    311	0243  59				     pop cx
    312	0244  E2 CB			     loop outside
    313
    314	0246  07 5E 5D 5A 59 5B	58	     pop es si bp dx cx	bx ax
    315
    316	024D  C3			     ret										    +
    317				     ;return function value
    318	024E				     endp										    +
    319				     ;proc's ending
    320
    321				     ;------------------------------------------------------------------------------
    322
    323				     ;------------------------------------------------------------------------------
    324				     ; Convert hex to ascii code
    325				     ; Entry:		     AL	- converted symbol
    326				     ; Exit:		     AL	- result of converting
    327				     ; Destroyed:    AL
    328				     ;------------------------------------------------------------------------------
    329
    330	024E			     htoa    proc
    331
    332	024E  3C 0A			     cmp al, 10										    +
    333				     ;if (al - 10 < 0) zs = 1
    334	0250  73 02			     jae letter										    +
    335				     ;if (zs ==	0) goto	letter --|
    336	0252  72 05			     jb	digit										    +
    337				     ;if (zs ==	1) goto	digit ---|-|
    338																    +
    339				     ;							     | |
    340	0254				     letter:										    +
    341				     ;<--------------------------| |
    342	0254  04 37				     add al, 'A' - 10								    +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 7
test.asm



    343				     ;al += 'A'	- 10			       |
    344	0256  EB 06 90				     jmp ending									    +
    345				     ;-----------------------------|-|
    346	0259				     digit:										    +
    347				     ;<----------------------------| |
    348	0259  04 30				     add al, '0'								    +
    349				     ;al += '0'						     |
    350	025B  EB 01 90				     jmp ending									    +
    351				     ;-------------------------------|
    352																    +
    353				     ;								     |
    354	025E				     ending:										    +
    355				     ;<------------------------------|
    356	025E  C3			     ret										    +
    357				     ;return function value
    358	025F				     endp										    +
    359				     ;proc's ending
    360
    361				     ;------------------------------------------------------------------------------
    362
    363				     ;------------------------------------------------------------------------------
    364				     ; Print register value
    365				     ; Entry:		     BX	- right	offset on register in stack segment
    366				     ; Exit:		     None
    367				     ; Destroyed:    AL
    368				     ;------------------------------------------------------------------------------
    369
    370	025F			     RegVal  proc
    371
    372	025F  51			     push cx										    +
    373				     ;save cx -	amount of symbols in register name
    374	0260  53			     push bx										    +
    375				     ;save bx -	right offset of	register in stack segment
    376	0261  B9 0002			     mov cx, 0002h									    +
    377				     ;cx = 0002h
    378
    379	0264				     half:										    +
    380				     ;<------------------------------|
    381	0264  2B D9				     sub bx, cx									    +
    382				     ;bx -= cx						     |
    383	0266  83 C3 02				     add bx, 2									    +
    384				     ;bx += 2						     |
    385																    +
    386				     ;|----|----|				     |
    387	0269  36: 8A 07				     mov al, ss:[bx]								    +
    388				     ; high low	| al = low		     |
    389	026C  D0 E8 D0 E8 D0 E8	D0+		     shr al, 4									    +
    390	      E8		     ;al /= 16						     |
    391	0274  E8 FFD7				     call htoa									    +
    392				     ;hex al to	ascii				     |
    393	0277  AB				     stosw									    +
    394				     ;mov es:[di], ax /	add di,	2    |
    395																    +
    396				     ;|----|----|				     |
    397	0278  36: 8A 07				     mov al, ss:[bx]								    +
    398				     ; high low	| al = high		     |
    399	027B  24 0F				     and al, 0fh								    +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 8
test.asm



    400				     ;al && 00001111h				     |
    401	027D  E8 FFCE				     call htoa									    +
    402				     ;hex al to	ascii				     |
    403	0280  AB				     stosw									    +
    404				     ;mov es:[di], ax /	add di,	2    |
    405	0281  E2 E1			     loop half										    +
    406				     ;-------------------------------|
    407
    408	0283  5B			     pop bx										    +
    409				     ;return bx
    410	0284  59			     pop cx										    +
    411				     ;return cx
    412
    413	0285  C3			     ret										    +
    414				     ;return function value
    415	0286				     endp										    +
    416				     ;proc's ending
    417
    418				     ;------------------------------------------------------------------------------
    419
    420				     ;------------------------------------------------------------------------------
    421				     ; Print information about one register
    422				     ; Entry:		     SI	- address of string to current register	name
    423				     ;				     DI	- place	on the screen where will be register value
    424				     ; Exit:		     None
    425				     ; Destroyed:    DI, SI, AL
    426				     ;------------------------------------------------------------------------------
    427
    428	0286			     OneRegister     proc
    429
    430	0286  57			     push di										    +
    431				     ;save di -	previous offset	on screen
    432	0287  51			     push cx										    +
    433				     ;save cx -	loop counter for all registers
    434
    435	0288  B9 0003			     mov cx, 0003h									    +
    436				     ;cx = 3 | amount of symbols in any	register name: 'xx '
    437
    438	028B				     register_name:									    +
    439				     ;<------------------------------|
    440	028B  AC				     lodsb									    +
    441				     ;mov al, ds:[si]				     |
    442	028C  AB				     stosw									    +
    443				     ;mov es:[di], ax /	add di,	2    |
    444	028D  E2 FC			     loop register_name									    +
    445				     ;-------------------------------|
    446	028F  46			     inc si										    +
    447				     ;si += 1
    448
    449	0290  E8 FFCC			     call RegVal									    +
    450				     ;print register value
    451
    452	0293  59			     pop cx										    +
    453				     ;return cx
    454	0294  5F			     pop di										    +
    455				     ;return di
    456	0295  81 C7 00A0		     add di, 0002h * window_len							     ;di += +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 9
test.asm



    457				     80	* 2
    458
    459	0299  C3			     ret										    +
    460				     ;return function value
    461	029A				     endp										    +
    462				     ;proc's ending
    463
    464				     ;------------------------------------------------------------------------------
    465
    466				     ;------------------------------------------------------------------------------
    467				     ; Draw registers inside the frame
    468				     ; Entry:		     SI	- first	register name string address
    469				     ; Exit:		     None
    470				     ; Destroyed:    CX, AX, BX
    471				     ;------------------------------------------------------------------------------
    472
    473	029A			     DrawString	     proc
    474
    475	029A  55			     push bp										    +
    476				     ;save bp
    477	029B  BD 0615r			     mov bp, offset AXString							     ;bp =  +
    478				     &AXString
    479	029E  8B F5			     mov si, bp										    +
    480				     ;si = bp
    481	02A0  5D			     pop bp										    +
    482				     ;return bp
    483
    484	02A1  51			     push cx										    +
    485				     ;save cx
    486	02A2  B9 0007			     mov cx, 0007h									    +
    487				     ;cx = 0007h | register name len (3) + register value (4)
    488	02A5  E8 0064			     call EvalShift									    +
    489				     ;calculate	first inside string position
    490	02A8  59			     pop cx										    +
    491				     ;return cx
    492
    493	02A9  B9 0008 90		     mov cx, reg_in_frame							     ;cx = 8+
    494				     | amount registers	in frame
    495
    496	02AD  50			     push ax										    +
    497				     ;save ax
    498	02AE  8B DC			     mov bx, sp										    +
    499				     ;bx = sp
    500	02B0  33 C0			     xor ax, ax										    +
    501				     ;ax = 0
    502	02B2  B8 0008			     mov ax, reg_in_frame							     ;ax = 8
    503	02B5  D1 E0			     shl ax, 1										    +
    504				     ;ax *= 2
    505	02B7  03 D8			     add bx, ax										    +
    506				     ;bx += ax - pointer on ax register	in stack
    507	02B9  58			     pop ax										    +
    508				     ;return ax
    509
    510	02BA				     all_registers:									    +
    511				     ;<------------------------------|
    512	02BA  E8 FFC9				     call OneRegister								    +
    513				     ;Print one	register information |
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 10
test.asm



    514	02BD  83 EB 02				     sub bx, 0002h								    +
    515				     ;bx -= 0002h - next register    |
    516	02C0  E2 F8			     loop all_registers									    +
    517				     ;-------------------------------|
    518
    519	02C2  C3			     ret										    +
    520				     ;return function value
    521	02C3				     endp										    +
    522				     ;proc's ending
    523
    524				     ;------------------------------------------------------------------------------
    525
    526				     ;------------------------------------------------------------------------------
    527				     ; Calculate values	of variables: x_start, y_start,	y_string
    528				     ; Entry:		     None
    529				     ; Exit:		     None
    530				     ; Destroyed:    AX, BX, DX, BP
    531				     ;------------------------------------------------------------------------------
    532
    533	02C3			     CalcParam	     proc
    534
    535	02C3  50			     push ax										    +
    536				     ;save ax
    537	02C4  32 E4			     xor ah, ah										    +
    538				     ;ah = 0
    539	02C6  A0 0399r			     mov al, len									    +
    540				     ;al = len
    541	02C9  8A 16 039Ar		     mov dl, height									    +
    542				     ;dl = height
    543	02CD  C6 06 039Cr 28 90		     mov x_start, window_len / 2							    +
    544				     ;x_start =	40
    545	02D3  D1 E8			     shr ax, 1										    +
    546				     ;ax /= 2
    547	02D5  28 06 039Cr		     sub x_start, al									    +
    548				     ;x_start -= len / 2
    549	02D9  58			     pop ax										    +
    550				     ;return ax
    551
    552	02DA  B3 0C			     mov bl, window_height / 2							     ;bp =  +
    553				     25	/ 2
    554	02DC  88 1E 039Dr		     mov y_start, bl									    +
    555				     ;y_start =	25 / 2
    556	02E0  D1 EA			     shr dx, 1										    +
    557				     ;dx /= 2
    558	02E2  28 16 039Dr		     sub y_start, dl									    +
    559				     ;y_start -= height	/ 2
    560
    561	02E6  8A 1E 039Dr		     mov bl, y_start									    +
    562				     ;bp = y_start
    563	02EA  FE C3			     inc bl										    +
    564				     ;bl += 1
    565	02EC  88 1E 039Er		     mov y_string, bl									    +
    566				     ;y_string = y_start + 1
    567
    568	02F0  33 FF			     xor di, di										    +
    569				     ;di = 0;
    570
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 11
test.asm



    571	02F2  32 E4			     xor ah, ah										    +
    572				     ;ah = 0
    573	02F4  A0 039Dr			     mov al, y_start									    +
    574				     ;al = y_start
    575	02F7  D0 E0			     shl al, 1										    +
    576				     ;al *= 2
    577	02F9  BD 0050			     mov bp, window_len									    +
    578				     ;bp = 80
    579	02FC  52			     push dx										    +
    580				     ;save size	of frame in stack
    581	02FD  F7 E5			     mul bp										    +
    582				     ;ax = 2 * y_start * 80
    583	02FF  5A			     pop dx										    +
    584				     ;return size of frame from	stack to dx
    585	0300  8B F8			     mov di, ax										    +
    586				     ;di = ax
    587	0302  A0 039Cr			     mov al, x_start									    +
    588				     ;ax = x_start
    589	0305  D0 E0			     shl al, 1										    +
    590				     ;ax *= 2
    591	0307  32 E4			     xor ah, ah										    +
    592				     ;ah = 0
    593	0309  03 F8			     add di, ax										    +
    594				     ;di += 2 *	x_start
    595
    596	030B  C3			     ret										    +
    597				     ;return function value
    598	030C				     endp										    +
    599				     ;proc's ending
    600
    601				     ;------------------------------------------------------------------------------
    602
    603				     ;------------------------------------------------------------------------------
    604				     ; Eval shift of frame inside string
    605				     ; Entry:		     CX	= string length
    606				     ; Exit:		     None
    607				     ; Destroyed:    DI, BP, AX, BX
    608				     ;------------------------------------------------------------------------------
    609
    610	030C			     EvalShift	     proc
    611
    612	030C  50 53 55			     push ax bx	bp									    +
    613				     ;save ax bx bp
    614
    615					     ;di = y_string * window_len * 2 + (x_start	+ (cx -	len) / 2) * 2
    616	030F  A0 039Er			     mov al, y_string									    +
    617				     ;al = y_string
    618	0312  D0 E0			     shl al, 1										    +
    619				     ;al *= 2
    620	0314  32 E4			     xor ah, ah										    +
    621				     ;ah = 0
    622	0316  BD 0050			     mov bp, window_len									    +
    623				     ;bp = 80
    624	0319  52			     push dx										    +
    625				     ;save size	of frame in stack
    626	031A  F7 E5			     mul bp										    +
    627				     ;ax = 2 * y_start * 80
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 12
test.asm



    628	031C  5A			     pop dx										    +
    629				     ;return size of frame from	stack to dx≈
    630	031D  8B F8			     mov di, ax										    +
    631				     ;di = ax
    632
    633	031F  32 E4			     xor ah, ah										    +
    634				     ;ah = 0
    635	0321  32 FF			     xor bh, bh										    +
    636				     ;bh = 0
    637	0323  A0 039Cr			     mov al, x_start									    +
    638				     ;al = x_start
    639	0326  BD 0399r			     mov bp, offset len									    +
    640				     ;bp = &len
    641	0329  8A 1E 0399r		     mov bl, len									    +
    642				     ;bl = len
    643	032D  2A D9			     sub bl, cl										    +
    644				     ;bl -= cl
    645	032F  D0 EB			     shr bl, 1										    +
    646				     ;bl = (cx - len) /	2
    647	0331  02 C3			     add al, bl										    +
    648				     ;x_start += (cx - len) / 2
    649	0333  D0 E0			     shl al, 1										    +
    650				     ;al *= 2
    651	0335  03 F8			     add di, ax										    +
    652				     ;di += al
    653
    654	0337  D1 EF			     shr di, 1										    +
    655				     ;di /= 2
    656	0339  D1 E7			     shl di, 1										    +
    657				     ;di *= 2
    658
    659	033B  5D 5B 58			     pop bp bx ax									    +
    660				     ;return bp	bx ax
    661
    662	033E  C3			     ret										    +
    663				     ;return function value
    664	033F				     endp										    +
    665				     ;proc's ending
    666
    667				     ;------------------------------------------------------------------------------
    668
    669				     ;------------------------------------------------------------------------------
    670				     ; Eval string length with '$' terminal symbol
    671				     ; Entry:		     SI	= data string address
    672				     ; Exit:		     CX
    673				     ; Destroyed:    SI, AL, CX
    674				     ;------------------------------------------------------------------------------
    675
    676	033F			     StrLen  proc
    677
    678	033F				     str_len:										    +
    679				     ;<------------------------------|
    680	033F  AC				     lodsb									    +
    681				     ;mov al, ds:[si]				     |
    682	0340  3C 24				     cmp al, '$'								    +
    683				     ;if (al ==	'$') zf	= 1		     |
    684	0342  74 05				     jz	end_str_len								    +
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 13
test.asm



    685				     ;if (zf ==	1) goto	end_str_len  |
    686	0344  83 C1 02				     add cx, 2									    +
    687				     ;cx += 2						     |
    688	0347  E2 F6			     loop str_len									    +
    689				     ;-------------------------------|
    690	0349				     end_str_len:									    +
    691				     ;label of str len ending
    692
    693	0349  C3			     ret										    +
    694				     ;return function value
    695	034A				     endp										    +
    696				     ;proc's ending
    697
    698				     ;------------------------------------------------------------------------------
    699
    700				     ;------------------------------------------------------------------------------
    701				     ; Draw frame with size: len, height
    702				     ; Entry:		     SI	= data string address
    703				     ;				     DH	= frame	height
    704				     ;				     DL	= frame	len
    705				     ; Exit:		     None
    706				     ; Destroyed:    BX, CX, DI
    707				     ;------------------------------------------------------------------------------
    708
    709	034A			     DrawFrame	     proc
    710
    711	034A  50 53 51 52 56 57	55	     push ax bx	cx dx si di bp							     ;save  +
    712				     ax	bx cx dx si di bx
    713
    714	0351  E8 0025			     call PrintString									    +
    715				     ;print string
    716
    717	0354  8A CE			     mov cl, dh										    +
    718				     ;loop on length of	frame string
    719	0356  32 ED			     xor ch, ch										    +
    720				     ;ch = 0
    721	0358  83 E9 02			     sub cx, 2										    +
    722				     ;without first and	lsat symbols of	string
    723	035B				     cycle1:										    +
    724				     ;<--------------------------|
    725	035B  81 C7 00A0			     add di, window_len	* 2						     ;di += +
    726				     window_len	* 2	      |
    727	035F  E8 0017				     call PrintString								    +
    728				     ;print string			     |
    729	0362  83 EE 03				     sub si, 3									    +
    730				     ;si -= 3					     |
    731	0365  E2 F4			     loop cycle1									    +
    732				     ;---------------------------|
    733	0367  83 C6 03			     add si, 3										    +
    734				     ;si += 3
    735
    736	036A  81 C7 00A0		     add di, window_len	* 2							     ;di += +
    737				     window_len	* 2 (next line)
    738	036E  E8 0008			     call PrintString									    +
    739				     ;print string
    740
    741	0371  5D 5F 5E 5A 59 5B	58	     pop bp di si dx cx	bx ax							     ;return+
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 14
test.asm



    742				     bp	di si dx cx bx ax
    743
    744	0378  C3			     ret										    +
    745				     ;return function value
    746	0379				     endp										    +
    747				     ;proc's ending
    748
    749				     ;------------------------------------------------------------------------------
    750
    751				     ;------------------------------------------------------------------------------
    752				     ; Draws string to console in format: s1s2....s2s3
    753				     ; Entry:		     SI	= string address
    754				     ;				     DL	= string len
    755				     ; Exit:		     None
    756				     ; Destroyed:    AX, BX, CX, SI
    757				     ;------------------------------------------------------------------------------
    758
    759	0379			     PrintString     proc
    760
    761	0379  8A 26 039Br		     mov ah, frame_color								    +
    762				     ;set symbols color
    763
    764	037D  AC			     lodsb										    +
    765				     ;mov al, ds:[si]
    766	037E  AB			     stosw										    +
    767				     ;mov es:[di], ax /	add di,	2
    768
    769	037F  51			     push cx										    +
    770				     ;save prev	loop cnt
    771	0380  33 C9			     xor cx, cx										    +
    772				     ;cx = 0
    773	0382  8A CA			     mov cl, dl										    +
    774				     ;counter =	dl
    775	0384  80 E9 02			     sub cl, 2										    +
    776				     ;without top and bottom line
    777	0387  8A 04			     mov al, [si]									    +
    778				     ;al = [si]
    779	0389				     cycle:										    +
    780				     ;<------------------------------|
    781	0389  AB				     stosw									    +
    782				     ;mov es:[di], ax /	add di,	2    |
    783	038A  E2 FD			     loop cycle										    +
    784				     ;-------------------------------|
    785	038C  46			     inc si										    +
    786				     ;bx++
    787	038D  59			     pop cx										    +
    788				     ;return prev loop cnt
    789
    790	038E  AC			     lodsb										    +
    791				     ;mov al, ds:[si]
    792	038F  AB			     stosw										    +
    793				     ;mov es:[di], ax /	add di,	2
    794
    795	0390  8A DA			     mov bl, dl										    +
    796				     ;bl = dl
    797	0392  32 FF			     xor bh, bh										    +
    798				     ;bh = 0
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 15
test.asm



    799	0394  D1 E3			     shl bx, 1										    +
    800				     ;bx *= 2
    801	0396  2B FB			     sub di, bx										    +
    802				     ;set di to	line beginning
    803
    804	0398  C3			     ret										    +
    805				     ;return function value
    806	0399				     endp										    +
    807				     ;proc's ending
    808
    809				     ;------------------------------------------------------------------------------
    810
    811	0399  1F		     len			     db	31							    +
    812				     ;frame row	length
    813	039A  0A		     height			     db	10							    +
    814				     ;frame column height
    815	039B  4E		     frame_color	     db	4eh							     ;frame +
    816				     element color
    817
    818	039C  00		     x_start			     db	0							    +
    819				     ;x	frame start position
    820	039D  00		     y_start			     db	0							    +
    821				     ;y	frame start position
    822	039E  00		     y_string			     db	0							    +
    823				     ;y	string start position
    824	      =0008		     reg_in_frame	     equ 8							     ;amount+
    825				     of	registers in frame
    826	039F  00		     Active			     db	0							    +
    827				     ;frame status
    828
    829	03A0  C9 CD BB BA 20 BA	C8+  DoubleFrameString	     db	0c9h, 0cdh, 0bbh, 0bah,	020h, 0bah, 0c8h, 0cdh,	0bch
    830	      CD BC
    831	03A9  0136*(0000)	     Buffer dw 31 * 10 dup (0)
    832
    833	0615  61 78 20 24	     AXString			     db	"ax $"							    +
    834				     ;registers	names
    835	0619  62 78 20 24	     BXString			     db	"bx $"
    836	061D  63 78 20 24	     CXString			     db	"cx $"
    837	0621  64 78 20 24	     DXString			     db	"dx $"
    838	0625  73 69 20 24	     SIString			     db	"si $"
    839	0629  64 69 20 24	     DIString			     db	"di $"
    840	062D  64 73 20 24	     DSString			     db	"ds $"
    841	0631  65 73 20 24	     ESString			     db	"es $"
    842
    843	0635			     EOP:
    844				     end     Start										    +
    845				     ;prog's ending
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 16
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/27/25"
??FILENAME			  Text	 "test	  "
??TIME				  Text	 "20:27:33"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TEST
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACTIVE				  Byte	 DGROUP:039F
ALL_REGISTERS			  Near	 DGROUP:02BA
AXSTRING			  Byte	 DGROUP:0615
BUFFER				  Word	 DGROUP:03A9
BXSTRING			  Byte	 DGROUP:0619
CALCPARAM			  Near	 DGROUP:02C3
CLOSEFRAME			  Near	 DGROUP:016A
CLOSING				  Near	 DGROUP:01CE
CXSTRING			  Byte	 DGROUP:061D
CYCLE				  Near	 DGROUP:0389
CYCLE1				  Near	 DGROUP:035B
DIGIT				  Near	 DGROUP:0259
DISTRING			  Byte	 DGROUP:0629
DOUBLEFRAMESTRING		  Byte	 DGROUP:03A0
DRAWFRAME			  Near	 DGROUP:034A
DRAWSTRING			  Near	 DGROUP:029A
DSSTRING			  Byte	 DGROUP:062D
DXSTRING			  Byte	 DGROUP:0621
ENDING				  Near	 DGROUP:025E
END_STR_LEN			  Near	 DGROUP:0349
EOP				  Near	 DGROUP:0635
ESSTRING			  Byte	 DGROUP:0631
EVALSHIFT			  Near	 DGROUP:030C
FRAME_COLOR			  Byte	 DGROUP:039B
HALF				  Near	 DGROUP:0264
HEIGHT				  Byte	 DGROUP:039A
HTOA				  Near	 DGROUP:024E
INF_LOOP			  Near	 DGROUP:0103
INSIDE				  Near	 DGROUP:0223
INSIDE_CLOSE			  Near	 DGROUP:01A0
LEN				  Byte	 DGROUP:0399
LETTER				  Near	 DGROUP:0254
MAINBORDER			  Near	 DGROUP:01CF
NEW08H				  Near	 DGROUP:0118
NEW09H				  Near	 DGROUP:013E
OLD				  Near	 DGROUP:015C
OLD08OFS			  Word	 DGROUP:013A
OLD08SEG			  Word	 DGROUP:013C
Turbo Assembler	 Version 4.1	    02/27/25 20:27:33	    Page 17
Symbol Table



OLD09OFS			  Word	 DGROUP:0166
OLD09SEG			  Word	 DGROUP:0168
OLD_08H				  Near	 DGROUP:0130
ONEREGISTER			  Near	 DGROUP:0286
OUTSIDE				  Near	 DGROUP:0211
OUTSIDE_CLOSE			  Near	 DGROUP:018E
PRINTSTRING			  Near	 DGROUP:0379
REGISTER_NAME			  Near	 DGROUP:028B
REGVAL				  Near	 DGROUP:025F
REG_IN_FRAME			  Number 0008
REMEMBERTOBUFFER		  Near	 DGROUP:01FF
SISTRING			  Byte	 DGROUP:0625
SKIP_ACTIVISION			  Near	 DGROUP:0130
SKIP_CLOSE			  Near	 DGROUP:015C
SKIP_MEMORY			  Near	 DGROUP:01F2
SKIP_OPEN			  Near	 DGROUP:0155
START				  Near	 DGROUP:0100
STRLEN				  Near	 DGROUP:033F
STR_LEN				  Near	 DGROUP:033F
VIDEO_SEGMENT			  Number B800
WINDOW_HEIGHT			  Number 0019
WINDOW_LEN			  Number 0050
X_START				  Byte	 DGROUP:039C
Y_START				  Byte	 DGROUP:039D
Y_STRING			  Byte	 DGROUP:039E

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0635 Word	  Public  CODE
