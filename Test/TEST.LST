Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 1
test.asm



      1				     ;-----------------------------------------------------------------------------------------------
      2				     -------------------
      3				     ;This program is the third	version	of resident and	it draw	frame if key ==	ESC
      4				     ;-----------------------------------------------------------------------------------------------
      5				     -------------------
      6				     ;					      program
      7
      8	0000			     .model tiny   ;64 kilobytes in RAM, address == 16 bit == 2	bytes (because:	sizeof (register) ==+
      9				     2 bytes)
     10
     11				     ;-----------------------------------------------------------------------------------------------
     12				     ---------------
     13				     ;										     main program
     14				     ;-----------------------------------------------------------------------------------------------
     15				     ---------------
     16
     17	0000			     .code	   ;begin program
     18				     org 100h	   ;start == 256:   jmp	start == jmp 256 != jmp	0 (because address [0;255] in	    +
     19				     program segment in	DOS for	PSP)
     20	0100			     start:
     21	0100  33 C0			     xor ax, ax
     22	0102  8E C0			     mov es, ax	      ;es = 0
     23
     24	0104  BB 0024			     mov bx, 0009h*4  ;bx = address on 9th interrupt
     25	0107  CD 09			     int 09h	      ;call old	9th interrupt
     26
     27	0109  26: 8B 07			     mov ax, es:[bx]
     28	010C  A3 0155r			     mov address_of_old_9th_interrupt, ax  ;save address of old	9th interrupt
     29
     30	010F  26: 8B 47	02		     mov ax, es:[bx+2]
     31	0113  A3 0157r			     mov segment_of_old_9th_interrupt, ax  ;save segment of old	9th interrupt
     32
     33	0116  FA			     cli     ;CPU cannot work with interrupts
     34
     35	0117  26: C7 07	0136r		     mov es:[bx], offset new_9th_interrupt    ;es:[bx] = address on new	9th interrupt
     36
     37	011C  0E			     push cs
     38	011D  58			     pop ax	;ax = cs (segment of our code and code with new	9th interrupt)
     39
     40	011E  26: 89 47	02		     mov es:[bx+2], ax	  ;es:[bx+2] in	table with interrupts =	cs (segment address, where  +
     41				     is	code with new 9th interrupt)
     42
     43	0122  FB			     sti       ;CPU can	work with interrupts
     44
     45	0123  CD 09			     int 09h   ;call new 9th interrupt
     46
     47	0125  B8 3100			     mov ax, 3100h	 ;complete program, return 00h and save	code in	RAM from segment    +
     48				     address in	PSP in quantity	= dx * 16 bytes
     49
     50	0128  BA 0040r			     mov dx, offset end_of_program
     51	012B  D1 EA D1 EA D1 EA	D1+	     shr dx, 4
     52	      EA
     53	0133  42			     inc dx		  ;dx =	(address of program's end)/16 +	1
     54
     55	0134  CD 21			     int 21h		  ;call	21th interrupt	(end work of CPU)
     56				     ;-----------------------------------------------------------------------------------------------
     57				     ---------------
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 2
test.asm



     58
     59
     60
     61
     62
     63
     64
     65
     66
     67
     68
     69
     70
     71
     72
     73
     74
     75
     76
     77
     78				     ;-----------------------------------------------------------------------------------------------
     79				     ---------------
     80				     ;												    +
     81				     new_9th_interrupt
     82				     ;Has code for new 9th interrupt, that can print key in video memory and after calls old 9th    +
     83				     interrupt
     84				     ;Entry: None
     85				     ;
     86				     ;Exit:  None
     87				     ;
     88				     ;Destr: None
     89				     ;-----------------------------------------------------------------------------------------------
     90				     ---------------
     91
     92	0136			     new_9th_interrupt proc
     93
     94	0136  50 53 51 52 56 57	1E+	     push ax bx	cx dx si di ds es
     95	      06
     96	013E  0E			     push cs
     97	013F  1F			     pop ds	;ds = cs
     98
     99	0140  E4 60			     in	al, 60h	  ;al =	scan code of last key from 60th	port
    100	0142  3C 02			     cmp al, 02d
    101	0144  75 06			     jne check_for_delete_frame	      ;if (al != scan_code_of_hot_key):	goto		    +
    102				     check_for_delete_frame
    103	0146  E8 0010				     call sosi
    104	0149  EB 01 90				     jmp do_old_9th_interrupt	    ;end print frame
    105	014C				     check_for_delete_frame:
    106
    107
    108	014C				     do_old_9th_interrupt:	     ;skip new_9th_interrupt
    109
    110	014C  07 1F 5F 5E 5A 59	5B+	     pop es ds di si dx	cx bx ax
    111	      58
    112	0154  EA			     db	0eah
    113	0155  0000			     address_of_old_9th_interrupt dw 0000h
    114	0157  0000			     segment_of_old_9th_interrupt dw 0000h    ;jmp segment_of_old_9th_interrupt:	    +
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 3
test.asm



    115				     [address_of_old_9th_interrupt]    (call old 9th interrupt)
    116
    117	0159				     endp
    118				     ;-----------------------------------------------------------------------------------------------
    119				     ---------------
    120
    121
    122
    123
    124
    125
    126
    127
    128
    129
    130
    131
    132				     ;-----------------------------------------------------------------------------------------------
    133				     ---------------
    134				     ;												    +
    135				     count_left_high_point
    136				     ;Count coordinates	of left	high point of frame
    137				     ;
    138				     ;Entry: x_size = horizontal size of frame
    139				     ;		     y_size = vertical	 size of frame
    140				     ;
    141				     ;Exit:  di	= address in video memory for left high	of frame
    142				     ;
    143				     ;Destr: ax	= calculations
    144				     ;		     bx	= logical  left	coordinate
    145				     ;	     cx	= logical  high	coordinate
    146				     ;	     si	= physical left	address
    147				     ;	     di	= physical high	address	and address of point in	video memory
    148				     ;-----------------------------------------------------------------------------------------------
    149				     ---------------
    150
    151	0159			     sosi proc
    152
    153	0159  BF B800			     mov di, 0b800h	;video segment
    154	015C  8E C7			     mov es, di		;register es for segment address of video memory  (es != const	  es+
    155				     ==	reg)
    156
    157	015E  E8 002C			     call count_left_high_point
    158
    159	0161  57			     push di   ;save di	for print registers
    160
    161	0162  8A 26 0000r		     mov ah, color     ;ah = color
    162
    163	0166  BE 000Br			     mov si, offset frame_style	 ;si = address on style	of frame
    164
    165	0169  8B 0E 0003r		     mov cx, x_size
    166	016D  83 E9 02			     sub cx, 0002d     ;cx = x_size - 2	= len of str with recurring symbol
    167
    168	0170  E8 0041			     call print_frame
    169
    170	0173  BE 0018r			 mov si, offset	list_of_registers    ;si = address on list of registers
    171
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 4
test.asm



    172	0176  5F			     pop di
    173	0177  81 C7 00A4		     add di, 0080d * 0002d + 0002d * 0002d  ;di	== address of beginning
    174
    175	017B  8B 0E 0016r		     mov cx, quantity_of_registers   ;cx = how many registers program must print
    176
    177	017F  8B DC			     mov bx,  sp
    178	0181  83 C3 02			     add bx, 0002d	  ;bx =	sp + quantity_of_registers * 0002d   - by this address in   +
    179				     stack on ax. After	on bx, cx, dx, ..., es
    180
    181	0184				     print_next_register:
    182	0184  E8 005F			     call print_list_of_reg
    183
    184	0187  83 EB 02			     sub bx, 0002d		   ;address in stack for value next register
    185
    186	018A  E2 F8			     loop print_next_register	   ;while (cx--) {print_next_register ();s}
    187
    188	018C  C3			     ret
    189	018D				     endp
    190				     ;-----------------------------------------------------------------------------------------------
    191				     ---------------
    192
    193
    194
    195
    196
    197
    198
    199
    200
    201
    202
    203
    204
    205
    206
    207
    208
    209				     ;-----------------------------------------------------------------------------------------------
    210				     ---------------
    211				     ;												    +
    212				     count_left_high_point
    213				     ;Count coordinates	of left	high point of frame
    214				     ;
    215				     ;Entry: x_size = horizontal size of frame
    216				     ;		     y_size = vertical	 size of frame
    217				     ;
    218				     ;Exit:  di	= address in video memory for left high	of frame
    219				     ;
    220				     ;Destr: ax	= calculations
    221				     ;		     bx	= logical  left	coordinate
    222				     ;	     cx	= logical  high	coordinate
    223				     ;	     si	= physical left	address
    224				     ;	     di	= physical high	address	and address of point in	video memory
    225				     ;-----------------------------------------------------------------------------------------------
    226				     ---------------
    227
    228	018D			     count_left_high_point proc
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 5
test.asm



    229
    230					     ;center point:   0080d*(0008d)*0002d + 0002d*(0038d)
    231
    232	018D  A1 0003r			     mov ax, x_size
    233	0190  D1 E8			     shr ax, 1
    234	0192  8B 1E 0007r		     mov bx, x_center
    235	0196  2B D8			     sub bx, ax	      ;bx = 0038d - x_size / 2
    236
    237	0198  B8 0002			     mov ax, 0002d
    238	019B  F7 E3			     mul bx
    239	019D  8B F0			     mov     si, ax	  ;si =	0002d *	bx = 0002d * (0038d - x_size / 2)   - left point
    240
    241	019F  A1 0005r			     mov ax, y_size
    242	01A2  D1 E8			     shr ax, 1
    243	01A4  8B 0E 0009r		     mov cx, y_center
    244	01A8  2B C8			     sub cx, ax	       ;cx = 0008d - y_size / 2
    245
    246	01AA  B8 00A0			     mov ax, 0160d
    247	01AD  F7 E1			     mul cx
    248	01AF  8B F8			     mov di, ax	       ;di = cx	* 0160d	= 0002d	* 0080d	* (0008d - y_size / 2)	 - high	point
    249
    250	01B1  03 FE			     add di, si	       ;di = 0002d*0080d*(0008d	- y_size / 2) +	0002d*(0038d - x_size /	2) -+
    251				     left high point in	Video memory
    252
    253	01B3  C3			     ret
    254	01B4				     endp
    255				     ;-----------------------------------------------------------------------------------------------
    256				     ---------------
    257
    258				     ;-----------------------------------------------------------------------------------------------
    259				     ---------------
    260				     ;												    +
    261				     print_frame
    262				     ;Draws frame x_size * y_size in frame_style and color
    263				     ;
    264				     ;Entry: ah	= color
    265				     ;		     cx	= x_size - 2 = len of str with recurring symbol
    266				     ;		     si	= address on line with style / on the first set	of symbols (for	the first   +
    267				     line)
    268				     ;		     di	= address of point in video memory (in video segment)
    269				     ;		     es	= segment address of video memory
    270				     ;
    271				     ;Exit: None
    272				     ;
    273				     ;Destr: dx	= index	of lines
    274				     ;		     si	= address on different sets of symbols from line with style
    275				     ;-----------------------------------------------------------------------------------------------
    276				     ---------------
    277
    278	01B4			     print_frame proc
    279	01B4  8B 16 0005r		     mov dx, y_size	   ;dx - index of line	(max value = y_size, step = -1,	min value = +
    280				     0)
    281
    282	01B8  E8 0014			     call print_line	   ;draw the first line	of frame with the first	set of symbols
    283	01BB  4A			     dec dx
    284
    285	01BC				     print_new_line:	   ;for	(bx = y_size - 1; bx > 1; bx--)	{printf	("%s\n",	    +
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 6
test.asm



    286				     middle_line);}
    287
    288	01BC  56				     push si	       ;save address on	the second set of symbols (for the middle   +
    289				     lines)
    290	01BD  E8 000F				     call print_line   ;draw the middle	line
    291	01C0  4A				     dec dx
    292	01C1  5E				     pop si
    293
    294	01C2  83 FA 01				     cmp dx, 1d
    295	01C5  75 F5				     jnz print_new_line
    296
    297	01C7  83 C6 03			     add si, 3		  ;address on the third	set of symbols (for the	last line)
    298
    299	01CA  E8 0002			     call print_line	  ;draw	the last line of frame
    300	01CD  4A			     dec dx
    301
    302	01CE  C3			     ret
    303	01CF				     endp
    304				     ;-----------------------------------------------------------------------------------------------
    305				     ---------------
    306
    307				     ;-----------------------------------------------------------------------------------------------
    308				     ---------------
    309				     ;												    +
    310				     print_line
    311				     ;Draws one	line with someone set of symbols
    312
    313				     ;Entry: cx	= x_size - 2 = len of str with recurring symbol
    314				     ;		     ah	= color
    315				     ;		     di	= address of point in video memory (in video segment)
    316				     ;		     si	= address on set of symbols
    317				     ;
    318				     ;Exit:  None
    319				     ;
    320				     ;Destr: al	= symbol
    321				     ;		     di	= shifting address of point in video memory (in	video segment)
    322				     ;		     si	= shifting address on set of symbols
    323				     ;-----------------------------------------------------------------------------------------------
    324				     ---------------
    325
    326	01CF			     print_line	proc
    327
    328	01CF  51			     push cx	  ;save	len of str with	recurring symbol
    329
    330	01D0  AC			     lodsb			     ;mov al, ds:[si]	 ;al = the first symbol	in set
    331										     ;inc si
    332
    333	01D1  AB			     stosw			     ;mov word ptr es:[di], ax	 ;put symbol and his color  +
    334				     (ax) in video memory by address = es[di]
    335										     ;add di, 2
    336
    337	01D2  AC			     lodsb			     ;mov al, ds:[si]	 ;al = the second symbol in set
    338										     ;inc si
    339
    340	01D3				     next_symbol:
    341
    342	01D3  AB			     stosw	     ;mov word ptr es:[di], ax
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 7
test.asm



    343								     ;add di, 2
    344
    345	01D4  E2 FD			     loop next_symbol	; while	(cx--) {printf ("%c", ax);}    //ax = second symbol with    +
    346				     color
    347
    348	01D6  AC			     lodsb	     ;mov al, ds:[si]	  ;al =	the third symbol in set
    349								     ;inc si
    350
    351	01D7  AB			     stosw	     ;mov word ptr es:[di], ax
    352								     ;add di, 2
    353
    354	01D8  59			     pop cx
    355
    356	01D9  81 C7 00A0		     add di, 80d * 2d
    357	01DD  2B 3E 0003r		     sub di, x_size
    358	01E1  2B 3E 0003r		     sub di, x_size	 ;count	new address of new line	in frame <==> '\n'
    359
    360	01E5  C3			     ret
    361	01E6				     endp
    362				     ;-----------------------------------------------------------------------------------------------
    363				     ---------------
    364
    365
    366
    367
    368
    369
    370
    371
    372
    373
    374
    375
    376
    377
    378
    379
    380
    381
    382
    383
    384
    385
    386
    387
    388
    389
    390
    391
    392
    393
    394
    395
    396
    397
    398
    399
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 8
test.asm



    400				     ;-----------------------------------------------------------------------------------------------
    401				     ---------------
    402				     ;												    +
    403				     print_list_of_reg
    404				     ;Print value of register in frame
    405				     ;
    406				     ;Entry: ah	= color
    407				     ;		     di	= address of point in video memory (in video segment)
    408				     ;		     si	= address on list of registers
    409				     ;	     bx	= address in stack for value of	register
    410				     ;	     ss	= segment address of stack
    411				     ;	     es	= segment address of video memory
    412				     ;
    413				     ;Exit:  di	= di + 0080d*0002d ('\n')
    414				     ;	     si	= address on new name of register
    415				     ;
    416				     ;Destr: al	= symbol
    417				     ;		     di	= shifting address of point in video memory (in	video segment)
    418				     ;		     si	= shifting address on set of symbols in	names of all registers
    419				     ;-----------------------------------------------------------------------------------------------
    420				     ---------------
    421
    422	01E6			     print_list_of_reg proc
    423
    424	01E6  57			     push di
    425	01E7  51			     push cx	 ;old cx = index_for_registers_in_list,	new cx = index_for_symbols_in_name  +
    426				     =>	save cx
    427
    428	01E8  8B 0E 0014r		     mov cx, quantity_symbols_in_name_of_register
    429
    430	01EC				     next_symbol_in_name_of_register:
    431
    432	01EC  AC			     lodsb						     ;mov al, ds:[si]	 ;al = the  +
    433				     symbol in register's name from list of registers
    434													     ;inc si
    435
    436	01ED  AB			     stosw						     ;mov word ptr es:[di], ax	    +
    437				     ;put symbol and his color (ax) in video memory by address = es[di]
    438													     ;add di, 2
    439
    440	01EE  E2 FC			     loop next_symbol_in_name_of_register
    441
    442																    +
    443				     ;-----------------------------------------------------------------------------------------------
    444				     ------------
    445					     ;print("%c%c = ", name_register[0], name_register[1]);
    446
    447	01F0  E8 0007			     call print_value_reg  ;print value	of register
    448
    449	01F3  59			     pop cx
    450
    451	01F4  5F			     pop di
    452	01F5  81 C7 00A0		     add di, 0080d*0002d  ;di =	di + 0080d*0002d ('\n')
    453
    454	01F9  C3			     ret
    455	01FA				     endp
    456				     ;-----------------------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 9
test.asm



    457				     ---------------
    458
    459				     ;-----------------------------------------------------------------------------------------------
    460				     ---------------
    461				     ;												    +
    462				     print_value_reg
    463				     ;Print value of register in frame
    464				     ;
    465				     ;Entry: ah	= color
    466				     ;		     bx	= address in stack for value of	register
    467				     ;		     ss	= segment address of stack
    468				     ;		     di	= address of point in video memory (in video segment)
    469				     ;	     es	= segment address of video memory
    470				     ;
    471				     ;Exit:  None
    472				     ;
    473				     ;Destr: al	= symbol
    474				     ;		     di	= shifting address of point in video memory (in	video segment)
    475				     ;
    476				     ;-----------------------------------------------------------------------------------------------
    477				     ---------------
    478	01FA			     print_value_reg proc				       ;register =  |_ _ _ _ | _ _ _ _ | _ _+
    479				     _ _ | _ _ _ _|
    480				     ;												    +
    481				     |	high	 lou	|  high	     lou   |
    482				     ;												    +
    483				     |			|		   |
    484				     ;									    |____high		    +
    485				     half_____|____lou half______|
    486
    487	01FA  36: 8A 07			     mov al, ss:[bx]	;al = lou half of register
    488
    489	01FD  D0 E8 D0 E8 D0 E8	D0+	     shr al, 4		;high half in al
    490	      E8
    491
    492	0205  E8 0025			     call translate_value_in_al_to_ascii     ;al = ascii of print_number
    493
    494	0208  AB			     stosw		     ;mov word ptr es:[di], ax	 ;put symbol and his color (ax)	in  +
    495				     video memory by address = es[di]
    496									     ;add di, 2
    497
    498																    +
    499				     ;-----------------------------------------------------------------------------------------------
    500				     -------------------------
    501
    502	0209  36: 8A 07			     mov al, ss:[bx]	;al = lou half of register
    503
    504	020C  24 0F			     and al, 0Fh	;lou half in al
    505
    506	020E  E8 001C			     call translate_value_in_al_to_ascii    ;al	= ascii	of print_number
    507
    508	0211  AB			     stosw		     ;mov word ptr es:[di], ax	 ;put symbol and his color (ax)	in  +
    509				     video memory by address = es[di]
    510									     ;add di, 2
    511
    512																    +
    513				     ;-----------------------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 10
test.asm



    514				     -------------------------
    515
    516	0212  36: 8A 47	01		     mov al, ss:[bx+1]	  ;al =	high half of register
    517
    518	0216  D0 E8 D0 E8 D0 E8	D0+	     shr al, 4		  ;high	half in	al
    519	      E8
    520
    521	021E  E8 000C			     call translate_value_in_al_to_ascii       ;al = ascii of print_number
    522
    523	0221  AB			     stosw		     ;mov word ptr es:[di], ax	 ;put symbol and his color (ax)	in  +
    524				     video memory by address = es[di]
    525									     ;add di, 2
    526
    527																    +
    528				     ;-----------------------------------------------------------------------------------------------
    529				     -------------------------
    530
    531	0222  36: 8A 47	01		     mov al, ss:[bx+1]	  ;al =	high half of register
    532
    533	0226  24 0F			     and al, 0Fh	  ;lou half in al
    534
    535	0228  E8 0002			     call translate_value_in_al_to_ascii       ;al = ascii of print_number
    536
    537	022B  AB			     stosw		     ;mov word ptr es:[di], ax	 ;put symbol and his color (ax)	in  +
    538				     video memory by address = es[di]
    539									     ;add di, 2
    540
    541	022C  C3			     ret
    542	022D				     endp
    543
    544				     ;-----------------------------------------------------------------------------------------------
    545				     ---------------
    546
    547				     ;-----------------------------------------------------------------------------------------------
    548				     ---------------
    549				     ;												    +
    550				     translate_value_in_al_to_ascii
    551				     ;Take value from al and translate it in symbol in ascii (For example: 1 ->	'1', 10	-> 'a')
    552				     ;
    553				     ;Entry: al	= value	of print_number
    554				     ;
    555				     ;Exit:  al	= ascii	of print_number
    556				     ;
    557				     ;Destr: al	= number -> ascii
    558				     ;
    559				     ;-----------------------------------------------------------------------------------------------
    560				     ---------------
    561	022D			     translate_value_in_al_to_ascii proc
    562
    563	022D  3C 0A			     cmp al, 0010d
    564	022F  78 05			     js	al_is_number
    565
    566					     ;al_is_latter:
    567	0231  2C 0A			     sub al, 0010d
    568	0233  04 61			     add al, 'a'
    569	0235  C3			     ret
    570
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 11
test.asm



    571	0236				     al_is_number:
    572	0236  04 30			     add al, '0'
    573	0238  C3			     ret
    574
    575	0239				     endp
    576
    577				     ;-----------------------------------------------------------------------------------------------
    578				     ---------------
    579
    580				     ;-----------------------------------------------------------------------------------------------
    581				     ---------------
    582				     ;					    variables
    583	0239			     .data
    584	0000  5B		     color db 01011011b
    585						 ;bBBBFFFF   b == blink;  B == back ground;  F == for ground
    586						 ; rgbIRGB   r/R == red;  g/G == green;	 b/B ==	blue;  I == increase
    587
    588	0001  02		     scan_code_of_hot_key_for_print_frame db 02d    ;hot key for print frame  == '1'
    589	0002  03		     scan_code_of_hot_key_for_delete_frame db 03d   ;hot key for delete	frame == '2'
    590
    591	0003  0024		     x_size dw 0036d   ;horizontal sizes of frame
    592	0005  000E		     y_size dw 0014d   ;vertical   sizes of frame
    593
    594
    595				     ;center point:   0080d*(0008d)*0002d + 0002d*(0038d)
    596	0007  0026		     x_center dw 0038d
    597	0009  000A		     y_center dw 0010d
    598
    599	000B  20 20 20 20 20 20	20+  frame_style db '	      '
    600	      20 20
    601
    602	0014  0005		     quantity_symbols_in_name_of_register dw 0005d
    603	0016  0008		     quantity_of_registers dw 0008d
    604
    605	0018  61 78 20 3D 20 62	78+  list_of_registers db 'ax =	bx = cx	= dx = si = di = ds = es = '
    606	      20 3D 20 63 78 20	3D+
    607	      20 64 78 20 3D 20	73+
    608	      69 20 3D 20 64 69	20+
    609	      3D 20 64 73 20 3D	20+
    610	      65 73 20 3D 20
    611
    612				     ;-----------------------------------------------------------------------------------------------
    613				     ---------------
    614
    615				     ;-----------------------------------------------------------------------------------------------
    616				     ---------------
    617	0040			     end_of_program:
    618				     end start		    ;end of asm	and address of program's beginning
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 12
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/25/25"
??FILENAME			  Text	 "test	  "
??TIME				  Text	 "12:37:29"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TEST
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ADDRESS_OF_OLD_9TH_INTERRUPT	  Word	 DGROUP:0155
AL_IS_NUMBER			  Near	 DGROUP:0236
CHECK_FOR_DELETE_FRAME		  Near	 DGROUP:014C
COLOR				  Byte	 DGROUP:0000
COUNT_LEFT_HIGH_POINT		  Near	 DGROUP:018D
DO_OLD_9TH_INTERRUPT		  Near	 DGROUP:014C
END_OF_PROGRAM			  Near	 DGROUP:0040
FRAME_STYLE			  Byte	 DGROUP:000B
LIST_OF_REGISTERS		  Byte	 DGROUP:0018
NEW_9TH_INTERRUPT		  Near	 DGROUP:0136
NEXT_SYMBOL			  Near	 DGROUP:01D3
NEXT_SYMBOL_IN_NAME_OF_REGISTER	  Near	 DGROUP:01EC
PRINT_FRAME			  Near	 DGROUP:01B4
PRINT_LINE			  Near	 DGROUP:01CF
PRINT_LIST_OF_REG		  Near	 DGROUP:01E6
PRINT_NEW_LINE			  Near	 DGROUP:01BC
PRINT_NEXT_REGISTER		  Near	 DGROUP:0184
PRINT_VALUE_REG			  Near	 DGROUP:01FA
QUANTITY_OF_REGISTERS		  Word	 DGROUP:0016
QUANTITY_SYMBOLS_IN_NAME_OF_REGI  Word	 DGROUP:0014
STER
SCAN_CODE_OF_HOT_KEY_FOR_DELETE_  Byte	 DGROUP:0002
FRAME
SCAN_CODE_OF_HOT_KEY_FOR_PRINT_F  Byte	 DGROUP:0001
RAME
SEGMENT_OF_OLD_9TH_INTERRUPT	  Word	 DGROUP:0157
SOSI				  Near	 DGROUP:0159
START				  Near	 DGROUP:0100
TRANSLATE_VALUE_IN_AL_TO_ASCII	  Near	 DGROUP:022D
X_CENTER			  Word	 DGROUP:0007
X_SIZE				  Word	 DGROUP:0003
Y_CENTER			  Word	 DGROUP:0009
Y_SIZE				  Word	 DGROUP:0005
Turbo Assembler	 Version 4.1	    02/25/25 12:37:29	    Page 13
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0040 Word	  Public  DATA
  _TEXT				  16  0239 Word	  Public  CODE
